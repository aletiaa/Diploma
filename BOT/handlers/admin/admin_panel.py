import sqlite3
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from ...utils.phone_validator import is_valid_phone
from ...utils.keyboard import admin_main_menu_keyboard, view_users_sort_keyboard

router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è –∞–¥–º—ñ–Ω –¥—ñ–π
class AdminPanelStates(StatesGroup):
    waiting_phone_to_delete = State()
    waiting_phone_to_block = State()
    waiting_phone_to_change_access = State()
    waiting_new_access_level = State()

# –ü—ñ—Å–ª—è –≤—Ö–æ–¥—É ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
async def show_admin_panel(message: Message | CallbackQuery, state: FSMContext):
    text = "üîß <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:"
    try:
        if isinstance(message, CallbackQuery):
            await message.message.edit_text(text, reply_markup=admin_main_menu_keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=admin_main_menu_keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await state.clear()

# üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(lambda c: c.data == "view_users")
async def view_users_sort_menu(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("üìä –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üéì –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≥—Ä—É–ø–æ—é
@router.callback_query(lambda c: c.data == "view_users_group")
async def view_users_by_group(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT full_name, phone_number, group_name, role FROM users ORDER BY group_name ASC")
    users = c.fetchall()
    conn.close()

    text = format_user_list(users, "üéì –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –≥—Ä—É–ø–∞–º–∏")

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üìÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É
@router.callback_query(lambda c: c.data == "view_users_year")
async def view_users_by_year(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT full_name, phone_number, graduation_year, role FROM users ORDER BY graduation_year DESC")
    users = c.fetchall()
    conn.close()

    if not users:
        text = "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üìÖ {u[2]} | üîë {u[3]}" for u in users])
        text = f"üìÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É:</b>\n\n{text}"

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üìò –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é + —Ä–æ–∫–æ–º
@router.callback_query(lambda c: c.data == "view_users_specialty")
async def view_users_by_specialty(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute('''
        SELECT u.full_name, u.phone_number, s.name, u.graduation_year, u.role
        FROM users u
        JOIN specialties s ON u.specialty_id = s.id
        ORDER BY s.name ASC, u.graduation_year DESC
    ''')
    users = c.fetchall()
    conn.close()

    if not users:
        text = "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üìò {u[2]} | üìÖ {u[3]} | üîë {u[4]}" for u in users])
        text = f"üìò <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é:</b>\n\n{text}"

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
def format_user_list(users, title):
    if not users:
        return "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    user_list = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üéì {u[2]} | üîë {u[3]}" for u in users])
    return f"üë• <b>{title}:</b>\n\n{user_list}"

# ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(lambda c: c.data == "delete_user")
async def delete_user_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_delete)

@router.message(AdminPanelStates.waiting_phone_to_delete)
async def delete_user_confirm(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        c.execute("DELETE FROM users WHERE phone_number = ?", (phone,))
        conn.commit()
        conn.close()
        await message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

    await show_admin_panel(message, state)

# üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏
@router.callback_query(lambda c: c.data == "block_user")
async def block_user_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_block)

@router.message(AdminPanelStates.waiting_phone_to_block)
async def block_user_confirm(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        c.execute("UPDATE users SET role = 'blocked' WHERE phone_number = ?", (phone,))
        conn.commit()
        conn.close()
        await message.answer("üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")

    await show_admin_panel(message, state)

# üîê –ó–º—ñ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø
@router.callback_query(lambda c: c.data == "change_access")
async def change_access_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏–π –¥–æ—Å—Ç—É–ø –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_change_access)

@router.message(AdminPanelStates.waiting_phone_to_change_access)
async def change_access_level(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await show_admin_panel(message, state)
    else:
        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É ('user', 'admin_limited', 'admin_super'):")
        await state.set_state(AdminPanelStates.waiting_new_access_level)

@router.message(AdminPanelStates.waiting_new_access_level)
async def confirm_access_change(message: Message, state: FSMContext):
    access = message.text.strip()
    data = await state.get_data()
    phone = data.get("phone")

    if access not in {"user", "admin_limited", "admin_super"}:
        await message.answer("‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("UPDATE users SET access_level = ? WHERE phone_number = ?", (access, phone))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {access}")
    await show_admin_panel(message, state)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
def user_exists_by_phone(phone_number: str) -> bool:
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT 1 FROM users WHERE phone_number = ?", (phone_number,))
    exists = c.fetchone() is not None
    conn.close()
    return exists
