import secrets
import sqlite3
import string
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from ...utils.phone_validator import is_valid_phone
from ...utils.keyboard import admin_main_menu_keyboard, view_users_sort_keyboard, user_management_keyboard, limited_admin_menu_keyboard
from ...database.queries import get_connection

router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è –∞–¥–º—ñ–Ω –¥—ñ–π
class AdminPanelStates(StatesGroup):
    waiting_phone_to_delete = State()
    waiting_phone_to_block = State()
    waiting_phone_to_change_access = State()
    waiting_new_access_level = State()

def get_admin_access_level(telegram_id: str) -> str | None:
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT access_level FROM admins WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def super_admin_only(func):
    async def wrapper(callback: CallbackQuery, *args, **kwargs):
        access_level = get_admin_access_level(str(callback.from_user.id))
        if access_level != "admin_super":
            await callback.message.answer("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return
        return await func(callback, *args, **kwargs)
    return wrapper

@router.callback_query(lambda c: c.data == "user_management_menu")
async def open_user_management_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üë• <b>–†–æ–±–æ—Ç–∞ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=user_management_keyboard,
        parse_mode="HTML"
    )

# –ü—ñ—Å–ª—è –≤—Ö–æ–¥—É ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
@router.callback_query(lambda c: c.data == "login_admin_menu")
async def show_admin_menu(callback: CallbackQuery, state: FSMContext):
    telegram_id = str(callback.from_user.id)
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT access_level FROM admins WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        access_level = result[0]
        if access_level == "admin_super":
            await callback.message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (–ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø):", reply_markup=admin_main_menu_keyboard)
        else:
            await callback.message.answer("üëÆ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å (–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø):", reply_markup=limited_admin_menu_keyboard)
    else:
        await callback.message.answer("‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")

# üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(lambda c: c.data == "view_users")
async def view_users_sort_menu(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text("üìä –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üéì –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≥—Ä—É–ø–æ—é
@router.callback_query(lambda c: c.data == "view_users_group")
async def view_users_by_group(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT full_name, phone_number, group_name, role FROM users ORDER BY group_name ASC")
    users = c.fetchall()
    conn.close()

    text = format_user_list(users, "üéì –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –≥—Ä—É–ø–∞–º–∏")

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üìÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É
@router.callback_query(lambda c: c.data == "view_users_year")
async def view_users_by_year(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT full_name, phone_number, graduation_year, role FROM users ORDER BY graduation_year DESC")
    users = c.fetchall()
    conn.close()

    if not users:
        text = "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üìÖ {u[2]} | üîë {u[3]}" for u in users])
        text = f"üìÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É:</b>\n\n{text}"

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# üìò –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é + —Ä–æ–∫–æ–º
@router.callback_query(lambda c: c.data == "view_users_specialty")
async def view_users_by_specialty(callback_query: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute('''
        SELECT u.full_name, u.phone_number, s.name, u.graduation_year, u.role
        FROM users u
        JOIN specialties s ON u.specialty_id = s.id
        ORDER BY s.name ASC, u.graduation_year DESC
    ''')
    users = c.fetchall()
    conn.close()

    if not users:
        text = "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üìò {u[2]} | üìÖ {u[3]} | üîë {u[4]}" for u in users])
        text = f"üìò <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é:</b>\n\n{text}"

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=view_users_sort_keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
def format_user_list(users, title):
    if not users:
        return "‚ùå –ñ–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    user_list = "\n".join([f"üë§ {u[0]} | üì± {u[1]} | üéì {u[2]} | üîë {u[3]}" for u in users])
    return f"üë• <b>{title}:</b>\n\n{user_list}"

# ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(lambda c: c.data == "delete_user")
async def delete_user_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_delete)

@router.message(AdminPanelStates.waiting_phone_to_delete)
async def delete_user_confirm(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        c.execute("DELETE FROM users WHERE phone_number = ?", (phone,))
        conn.commit()
        conn.close()
        await message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

    await show_admin_menu(message, state)

# üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏
@router.callback_query(lambda c: c.data == "block_user")
async def block_user_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_block)

@router.message(AdminPanelStates.waiting_phone_to_block)
async def block_user_confirm(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        c.execute("UPDATE users SET role = 'blocked' WHERE phone_number = ?", (phone,))
        conn.commit()
        conn.close()
        await message.answer("üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")

    await show_admin_menu(message, state)


# üîê –ó–º—ñ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø
@router.callback_query(lambda c: c.data == "change_access")
@super_admin_only
async def change_access_prompt(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    await callback_query.message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏–π –¥–æ—Å—Ç—É–ø –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:")
    await state.set_state(AdminPanelStates.waiting_phone_to_change_access)


@router.message(AdminPanelStates.waiting_phone_to_change_access)
@super_admin_only
async def change_access_level(message: Message, state: FSMContext, **kwargs):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    if not user_exists_by_phone(phone):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await show_admin_menu(message, state)
    else:
        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É ('user', 'admin_limited', 'admin_super'):")
        await state.set_state(AdminPanelStates.waiting_new_access_level)


def generate_password(length: int = 8) -> str:
    characters = string.ascii_letters + string.digits
    return ''.join(secrets.choice(characters) for _ in range(length))


@router.message(AdminPanelStates.waiting_new_access_level)
@super_admin_only
async def confirm_access_change(message: Message, state: FSMContext, **kwargs):
    access = message.text.strip()
    data = await state.get_data()
    phone = data.get("phone")

    if access not in {"user", "admin_limited", "admin_super"}:
        await message.answer("‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    conn = sqlite3.connect("alumni.db")
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º
    cursor.execute("SELECT telegram_id, full_name FROM users WHERE phone_number = ?", (phone,))
    user_row = cursor.fetchone()

    if not user_row:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return

    telegram_id, full_name = user_row

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É
    cursor.execute("UPDATE users SET access_level = ? WHERE phone_number = ?", (access, phone))

    if access == "user":
        cursor.execute("DELETE FROM admins WHERE telegram_id = ?", (telegram_id,))
        await message.answer("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    else:
        cursor.execute("SELECT 1 FROM admins WHERE telegram_id = ?", (telegram_id,))
        if cursor.fetchone() is None:
            password = generate_password()
            cursor.execute(
                "INSERT INTO admins (telegram_id, phone_number, full_name, password, access_level) VALUES (?, ?, ?, ?, ?)",
                (telegram_id, phone, full_name, password, access)
            )
            await message.bot.send_message(
                chat_id=telegram_id,
                text=f"üîê –í–∞—Å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É: <code>{password}</code>",
                parse_mode="HTML"
            )
        else:
            cursor.execute("UPDATE admins SET access_level = ? WHERE telegram_id = ?", (access, telegram_id))
        conn.commit()
        conn.close()

        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ: {access}")
        await show_admin_menu(message, state)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
def user_exists_by_phone(phone_number: str) -> bool:
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT 1 FROM users WHERE phone_number = ?", (phone_number,))
    exists = c.fetchone() is not None
    conn.close()
    return exists

@router.callback_query(lambda c: c.data == "view_uploaded_files")
@super_admin_only
async def view_uploaded_files(callback: CallbackQuery, state: FSMContext, **kwargs):
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT telegram_id, file_id, file_type, upload_time
        FROM user_files
        ORDER BY upload_time DESC
        LIMIT 10
    ''')
    files = cursor.fetchall()
    conn.close()

    if not files:
        await callback.message.answer("‚ùå –ñ–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        return

    for idx, (user_id, file_id, file_type, upload_time) in enumerate(files, start=1):
        caption = f"#{idx} üìÖ {upload_time}\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{user_id}</code>"

        try:
            if file_type == "photo":
                await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=file_id, caption=caption, parse_mode="HTML")
            else:
                await callback.message.bot.send_message(chat_id=callback.from_user.id, text=f"{caption}\nüîó –§–∞–π–ª: {file_id}", parse_mode="HTML")
        except TelegramBadRequest as e:
            await callback.message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É #{idx}.")

    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=admin_main_menu_keyboard)