# import sqlite3
# from aiogram import Router, types
# from aiogram.filters import Command
# from aiogram.types import ReplyKeyboardRemove
# from ...utils.keyboard import admin_panel_keyboard
# from ...config import SUPER_ADMIN_ID

# router = Router()
# admin_state = {}

# @router.message(Command("admin_panel"))
# async def open_admin_panel(message: types.Message):
#     telegram_id = str(message.from_user.id)

#     conn = sqlite3.connect("alumni.db")
#     c = conn.cursor()
#     c.execute("SELECT role FROM users WHERE telegram_id = ?", (telegram_id,))
#     result = c.fetchone()
#     conn.close()

#     if not result or result[0] != "admin":
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
#         return

#     level = "super" if message.from_user.id == SUPER_ADMIN_ID else "limited"
#     admin_state[message.chat.id] = {"level": level, "step": "menu"}

#     kb = admin_panel_keyboard(super_admin=(level == "super"))
#     await message.answer(f"üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ({level.upper()}):", reply_markup=kb)


# @router.message(lambda m: m.text == "üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
# async def view_users(message: types.Message):
#     state = admin_state.get(message.chat.id)
#     if not state or state["level"] != "super":
#         await message.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ SUPER –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
#         return

#     conn = sqlite3.connect("alumni.db")
#     c = conn.cursor()
#     c.execute("""
#         SELECT u.full_name, u.phone_number, d.name, s.name, u.role 
#         FROM users u 
#         LEFT JOIN departments d ON u.department_id = d.id 
#         LEFT JOIN specialties s ON u.specialty_id = s.id
#     """)
#     users = c.fetchall()
#     conn.close()

#     if not users:
#         await message.answer("üì≠ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
#         return

#     response = "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
#     for user in users:
#         response += f"‚Ä¢ {user[0]} | {user[1]} | {user[2]} | {user[3]} | {user[4]}\n"
#     await message.answer(response[:4000])  # –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –¥–æ–≤–≥–∏—Ö —Å–ø–∏—Å–∫—ñ–≤


# @router.message(lambda m: m.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
# async def change_user_role_start(message: types.Message):
#     state = admin_state.get(message.chat.id)
#     if not state or state["level"] != "super":
#         await message.answer("‚ùå –õ–∏—à–µ SUPER –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–ª—ñ.")
#         return

#     state["step"] = "await_user_for_role_change"
#     await message.answer("üë§ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å:")


# @router.message(lambda m: m.text == "üì∞ –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É")
# async def publish_news(message: types.Message):
#     admin_state[message.chat.id]["step"] = "await_news"
#     await message.answer("üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏:")


# @router.message(lambda m: m.text == "üìÖ –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é")
# async def add_event(message: types.Message):
#     admin_state[message.chat.id]["step"] = "await_event"
#     await message.answer("üìÖ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:")


# @router.message(lambda m: m.text == "‚ùå –í–∏–π—Ç–∏")
# async def exit_admin_panel(message: types.Message):
#     admin_state.pop(message.chat.id, None)
#     await message.answer("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=ReplyKeyboardRemove())


# # –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω/–ø–æ–¥—ñ–π/—Ä–æ–ª–µ–π
# @router.message()
# async def handle_admin_inputs(message: types.Message):
#     chat_id = message.chat.id
#     state = admin_state.get(chat_id)

#     if not state:
#         return

#     step = state.get("step")

#     if step == "await_news":
#         conn = sqlite3.connect("alumni.db")
#         c = conn.cursor()
#         c.execute("INSERT INTO news (content) VALUES (?)", (message.text,))
#         conn.commit()
#         conn.close()
#         await message.answer("‚úÖ –ù–æ–≤–∏–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
#         state["step"] = "menu"

#     elif step == "await_event":
#         conn = sqlite3.connect("alumni.db")
#         c = conn.cursor()
#         c.execute("INSERT INTO events (description) VALUES (?)", (message.text,))
#         conn.commit()
#         conn.close()
#         await message.answer("‚úÖ –ü–æ–¥—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
#         state["step"] = "menu"

#     elif step == "await_user_for_role_change":
#         phone = message.text.strip()
#         conn = sqlite3.connect("alumni.db")
#         c = conn.cursor()
#         c.execute("SELECT full_name, role FROM users WHERE phone_number = ?", (phone,))
#         user = c.fetchone()
#         if not user:
#             await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
#             conn.close()
#             return

#         state["target_phone"] = phone
#         state["step"] = "confirm_new_role"
#         await message.answer(f"üîÑ –ü–æ—Ç–æ—á–Ω–∞ —Ä–æ–ª—å {user[0]}: {user[1]}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å (user/admin):")
#         conn.close()

#     elif step == "confirm_new_role":
#         new_role = message.text.strip().lower()
#         if new_role not in ["user", "admin"]:
#             await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ 'user' –∞–±–æ 'admin'.")
#             return

#         phone = state.get("target_phone")
#         conn = sqlite3.connect("alumni.db")
#         c = conn.cursor()
#         c.execute("UPDATE users SET role = ? WHERE phone_number = ?", (new_role, phone))
#         conn.commit()
#         conn.close()
#         await message.answer(f"‚úÖ –†–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {phone} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_role}")
#         state["step"] = "menu"
