# handlers/administration/manage_access.py
from aiogram import Router, types
import sqlite3

router = Router()
access_state = {}

@router.message(lambda msg: msg.text == "üîê –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º")
async def start_access_management(message: types.Message):
    chat_id = message.chat.id
    access_state[chat_id] = {"step": "search"}
    await message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:")

@router.message()
async def handle_access(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in access_state:
        return

    state = access_state[chat_id]

    if state["step"] == "search":
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        if text.isdigit():
            c.execute("SELECT id, telegram_id, full_name, role, admin_level FROM users WHERE telegram_id = ?", (text,))
        else:
            c.execute("SELECT id, telegram_id, full_name, role, admin_level FROM users WHERE full_name LIKE ?", (f"%{text}%",))
        user = c.fetchone()
        conn.close()

        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        state["user_id"] = user[0]
        state["telegram_id"] = user[1]
        state["full_name"] = user[2]
        state["step"] = "change"

        await message.answer(
            f"üë§ <b>{user[2]}</b> (ID: {user[1]})\n"
            f"üîë –†–æ–ª—å: <b>{user[3]}</b>\n"
            f"‚öôÔ∏è –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: <b>{user[4] or 'N/A'}</b>\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n"
            f"üîπ user ‚Äì –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n"
            f"üîπ admin limited ‚Äì –û–±–º–µ–∂–µ–Ω–∏–π –∞–¥–º—ñ–Ω\n"
            f"üîπ admin super ‚Äì –°—É–ø–µ—Ä-–∞–¥–º—ñ–Ω",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="user"), types.KeyboardButton(text="admin limited"), types.KeyboardButton(text="admin super")],
                    [types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ],
                resize_keyboard=True
            )
        )

    elif state["step"] == "change":
        if text not in ["user", "admin limited", "admin super"]:
            if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
                del access_state[chat_id]
                await message.answer("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
                return
            await message.answer("‚ùó –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –¥–æ—Å—Ç—É–ø—É.")
            return

        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        if text == "user":
            c.execute("UPDATE users SET role = 'user', admin_level = NULL WHERE id = ?", (state["user_id"],))
        elif text == "admin limited":
            c.execute("UPDATE users SET role = 'admin', admin_level = 'limited' WHERE id = ?", (state["user_id"],))
        elif text == "admin super":
            c.execute("UPDATE users SET role = 'admin', admin_level = 'super' WHERE id = ?", (state["user_id"],))
        conn.commit()
        conn.close()

        await message.answer(f"‚úÖ –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è <b>{state['full_name']}</b> –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{text}</b>",
                             reply_markup=types.ReplyKeyboardRemove())
        del access_state[chat_id]
