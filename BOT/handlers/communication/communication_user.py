from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from ...utils.keyboard import communication_user_menu_keyboard, user_main_menu_keyboard
from ...database.queries import get_connection

router = Router()

@router.callback_query(lambda c: c.data == "user_communication_menu")
async def open_communication_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>üë• –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –≤–∏–ø—É—Å–∫–Ω–∏–∫–∞–º–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=communication_user_menu_keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data in ["chat_by_group", "chat_by_specialty", "chat_by_year"])
async def send_communication_link(callback: CallbackQuery, state: FSMContext):
    telegram_id = str(callback.from_user.id)
    chat_type = {
        "chat_by_group": "group",
        "chat_by_specialty": "specialty",
        "chat_by_year": "year"
    }[callback.data]

    conn = get_connection()
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    cursor.execute(f'''
        SELECT { 
            "group_name" if chat_type == "group" else
            "specialty_id" if chat_type == "specialty" else
            "enrollment_year"
        }
        FROM users
        WHERE telegram_id = ?
    ''', (telegram_id,))
    result = cursor.fetchone()

    if not result or not result[0]:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É —á–∞—Ç—É.")
        return

    user_value = result[0]

    # –Ø–∫—â–æ —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å ‚Äî –æ—Ç—Ä–∏–º–∞—î–º–æ —ó—ó –∫–æ–¥
    if chat_type == "specialty":
        cursor.execute("SELECT code FROM specialties WHERE id = ?", (user_value,))
        specialty_result = cursor.fetchone()
        if not specialty_result:
            await callback.message.answer("‚ö†Ô∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        user_value = specialty_result[0]

    # –®—É–∫–∞—î–º–æ —á–∞—Ç
    cursor.execute('''
        SELECT link FROM communication_chats
        WHERE chat_type = ? AND match_value = ?
    ''', (chat_type, str(user_value)))
    chat = cursor.fetchone()
    conn.close()

    if chat:
        await callback.message.answer(
            f"üîó –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç {chat_type}:\n{chat[0]}"
        )
    else:
        await callback.message.answer("‚ùå –ß–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
@router.callback_query(lambda c: c.data == "back_to_user_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=user_main_menu_keyboard, parse_mode="HTML")
