import re
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ...utils.phone_validator import is_valid_phone
from ...database.queries import get_connection
from ...utils.keyboard import admin_main_menu_keyboard, edit_admin_profile_keyboard

router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class EditAdminProfile(StatesGroup):
    choosing_field = State()
    editing_full_name = State()
    editing_phone_number = State()
    editing_password = State()

# üìã –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (CallbackQuery)
@router.callback_query(lambda c: c.data == "edit_admin")
async def show_edit_admin_profile_menu_callback(callback_query: CallbackQuery, state: FSMContext):
    telegram_id = str(callback_query.from_user.id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT full_name, phone_number FROM admins WHERE telegram_id = ?', (telegram_id,))
    admin_data = cursor.fetchone()
    conn.close()

    if admin_data:
        full_name, phone = admin_data
        text = (
            f"üìã <b>–í–∞—à—ñ –¥–∞–Ω—ñ (–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä):</b>\n"
            f"üë§ –ü–Ü–ë: {full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        )
    else:
        text = "‚ùå –î–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await callback_query.message.edit_text(text, reply_markup=edit_admin_profile_keyboard, parse_mode="HTML")
    await state.set_state(EditAdminProfile.choosing_field)

# üìã –ú–µ–Ω—é –ø—ñ—Å–ª—è –∑–º—ñ–Ω (Message)
async def show_edit_admin_profile_menu_message(message: Message, state: FSMContext):
    telegram_id = str(message.from_user.id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT full_name, phone_number FROM admins WHERE telegram_id = ?', (telegram_id,))
    admin_data = cursor.fetchone()
    conn.close()

    if admin_data:
        full_name, phone = admin_data
        text = (
            f"üìã <b>–í–∞—à—ñ –¥–∞–Ω—ñ (–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä):</b>\n"
            f"üë§ –ü–Ü–ë: {full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        )
    else:
        text = "‚ùå –î–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(text, reply_markup=edit_admin_profile_keyboard, parse_mode="HTML")
    await state.set_state(EditAdminProfile.choosing_field)

# ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞
@router.callback_query(lambda c: c.data == "back_to_admin_menu")
async def back_to_admin_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_main_menu_keyboard)
    await state.clear()

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@router.callback_query(lambda c: c.data.startswith("edit_admin_"))
async def choose_admin_field_to_edit(callback_query: CallbackQuery, state: FSMContext):
    action = callback_query.data

    if action == "edit_admin_full_name":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ü–Ü–ë (2 —Å–ª–æ–≤–∞, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏):")
        await state.set_state(EditAdminProfile.editing_full_name)

    elif action == "edit_admin_phone_number":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        await state.set_state(EditAdminProfile.editing_phone_number)

    elif action == "edit_admin_password":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:")
        await state.set_state(EditAdminProfile.editing_password)

# ‚úèÔ∏è –ó–º—ñ–Ω–∞ –ü–Ü–ë
@router.message(EditAdminProfile.editing_full_name)
async def edit_admin_full_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+ [–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+$", new_name):
        await message.answer("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –¥–≤–æ—Ö —Å–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE admins SET full_name = ? WHERE telegram_id = ?', (new_name, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ü–Ü–ë –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_admin_profile_menu_message(message, state)

# üì± –ó–º—ñ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(EditAdminProfile.editing_phone_number)
async def edit_admin_phone_number(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE admins SET phone_number = ? WHERE telegram_id = ?', (phone, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_admin_profile_menu_message(message, state)

# üîê –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
@router.message(EditAdminProfile.editing_password)
async def edit_admin_password(message: Message, state: FSMContext):
    new_password = message.text.strip()
    if len(new_password) < 4:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 4 —Å–∏–º–≤–æ–ª–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE admins SET password = ? WHERE telegram_id = ?', (new_password, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_admin_profile_menu_message(message, state)