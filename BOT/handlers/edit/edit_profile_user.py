import re
from datetime import datetime
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ...utils.phone_validator import is_valid_phone
from ...utils.specialties import search_specialty
from ...database.queries import get_connection
from ...utils.keyboard import edit_profile_keyboard, user_main_menu_keyboard

router = Router()

# –°—Ç–∞–Ω–∏
class EditProfile(StatesGroup):
    choosing_field = State()
    editing_full_name = State()
    editing_phone_number = State()
    editing_group_name = State()
    editing_specialty = State()
    editing_graduation_year = State()
    editing_birth_date = State()

# –ú–µ–Ω—é –ø—ñ—Å–ª—è CallbackQuery
@router.callback_query(lambda c: c.data == "edit_profile")
async def show_edit_profile_menu_callback(callback_query: CallbackQuery, state: FSMContext):
    telegram_id = str(callback_query.from_user.id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.full_name, u.phone_number, u.group_name, s.name, s.code, u.graduation_year, u.birth_date
        FROM users u
        LEFT JOIN specialties s ON u.specialty_id = s.id
        WHERE u.telegram_id = ?
    ''', (telegram_id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        full_name, phone, group, specialty_name, specialty_code, grad_year, birth_date = user_data
        specialty_info = f"{specialty_name} ({specialty_code})" if specialty_name else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        grad_year_info = grad_year if grad_year else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        birth_date_info = birth_date if birth_date else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

        text = (
            f"üìã <b>–í–∞—à—ñ –¥–∞–Ω—ñ:</b>\n"
            f"üë§ –ü–Ü–ë: {full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üéì –ì—Ä—É–ø–∞: {group}\n"
            f"üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {specialty_info}\n"
            f"üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {grad_year_info}\n"
            f"üéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_date_info}\n\n"
            f"–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        )
    else:
        text = "‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await callback_query.message.edit_text(text, reply_markup=edit_profile_keyboard, parse_mode="HTML")
    await state.set_state(EditProfile.choosing_field)

# –ú–µ–Ω—é –ø—ñ—Å–ª—è Message (–ø—ñ—Å–ª—è –∑–º—ñ–Ω)
async def show_edit_profile_menu_message(message: Message, state: FSMContext):
    telegram_id = str(message.from_user.id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.full_name, u.phone_number, u.group_name, s.name, s.code, u.graduation_year, u.birth_date
        FROM users u
        LEFT JOIN specialties s ON u.specialty_id = s.id
        WHERE u.telegram_id = ?
    ''', (telegram_id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        full_name, phone, group, specialty_name, specialty_code, grad_year, birth_date = user_data
        specialty_info = f"{specialty_name} ({specialty_code})" if specialty_name else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        grad_year_info = grad_year if grad_year else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        birth_date_info = birth_date if birth_date else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

        text = (
            f"üìã <b>–í–∞—à—ñ –¥–∞–Ω—ñ:</b>\n"
            f"üë§ –ü–Ü–ë: {full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üéì –ì—Ä—É–ø–∞: {group}\n"
            f"üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {specialty_info}\n"
            f"üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {grad_year_info}\n"
            f"üéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_date_info}\n\n"
            f"–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?"
        )
    else:
        text = "‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(text, reply_markup=edit_profile_keyboard, parse_mode="HTML")
    await state.set_state(EditProfile.choosing_field)


# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(lambda c: c.data == "back_to_user_menu")
async def back_to_user_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=user_main_menu_keyboard)
    await state.clear()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@router.callback_query(lambda c: c.data.startswith("edit_"))
async def choose_field_to_edit(callback_query: CallbackQuery, state: FSMContext):
    action = callback_query.data

    if action == "edit_full_name":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ü–Ü–ë (2 —Å–ª–æ–≤–∞, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏):")
        await state.set_state(EditProfile.editing_full_name)

    elif action == "edit_phone_number":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        await state.set_state(EditProfile.editing_phone_number)

    elif action == "edit_group_name":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12):")
        await state.set_state(EditProfile.editing_group_name)

    elif action == "edit_specialty":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:")
        await state.set_state(EditProfile.editing_specialty)

    elif action == "edit_graduation_year":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2022):")
        await state.set_state(EditProfile.editing_graduation_year)

    elif action == "edit_birth_date":
        await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
        await state.set_state(EditProfile.editing_birth_date)

# –ó–º—ñ–Ω–∞ –ü–Ü–ë
@router.message(EditProfile.editing_full_name)
async def edit_full_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+ [–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+$", new_name):
        await message.answer("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –¥–≤–æ—Ö —Å–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET full_name = ? WHERE telegram_id = ?', (new_name, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ü–Ü–ë –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_profile_menu_message(message, state)

# –ó–º—ñ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(EditProfile.editing_phone_number)
async def edit_phone_number(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET phone_number = ? WHERE telegram_id = ?', (phone, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_profile_menu_message(message, state)

# –ó–º—ñ–Ω–∞ –≥—Ä—É–ø–∏
@router.message(EditProfile.editing_group_name)
async def edit_group_name(message: Message, state: FSMContext):
    group = message.text.strip().upper()
    if not re.match(r"^[–ê-–ØA-Z]{2}-\d{2}$", group):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12):")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET group_name = ? WHERE telegram_id = ?', (group, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ì—Ä—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_profile_menu_message(message, state)

# –ó–º—ñ–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ
@router.message(EditProfile.editing_specialty)
async def edit_specialty(message: Message, state: FSMContext):
    user_input = message.text.strip()
    matches = search_specialty(user_input)

    if not matches:
        await message.answer("‚ùå –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    elif len(matches) > 1:
        options = "\n".join([f"{m['code']} ‚Äì {m['name']}" for m in matches])
        await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:\n{options}\n–í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ:")
        return

    specialty = matches[0]
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM specialties WHERE code=? AND name=?", (specialty["code"], specialty["name"]))
    row = cursor.fetchone()

    if row:
        cursor.execute('UPDATE users SET specialty_id = ? WHERE telegram_id = ?', (row[0], str(message.from_user.id)))
        conn.commit()
        await message.answer(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {specialty['name']} ({specialty['code']})")
    else:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –≤ –±–∞–∑—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")

    conn.close()
    await show_edit_profile_menu_message(message, state)

# –ó–º—ñ–Ω–∞ —Ä–æ–∫—É –≤–∏–ø—É—Å–∫—É
@router.message(EditProfile.editing_graduation_year)
async def edit_graduation_year(message: Message, state: FSMContext):
    year_str = message.text.strip()
    if not year_str.isdigit():
        await message.answer("‚ùå –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    year = int(year_str)
    if year > 2025 or year < 1900:
        await message.answer("‚ùå –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 1900 —Ç–∞ 2025. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET graduation_year = ? WHERE telegram_id = ?', (year, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {year}")
    await show_edit_profile_menu_message(message, state)

# –ó–º—ñ–Ω–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
@router.message(EditProfile.editing_birth_date)
async def edit_birth_date(message: Message, state: FSMContext):
    birth_date_str = message.text.strip()
    try:
        birth_date = datetime.strptime(birth_date_str, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ (–î–î.–ú–ú.–†–†–†–†):")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET birth_date = ? WHERE telegram_id = ?', (birth_date_str, str(message.from_user.id)))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_profile_menu_message(message, state)
