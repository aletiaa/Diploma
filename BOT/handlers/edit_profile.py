from aiogram import Router, types
from aiogram.filters import Command
from ..utils.specialties import search_specialty
from ..utils.department_recogniser import normalize_department
from ..utils.phone_validator import is_valid_phone
from ..utils.keyboard import edit_profile_keyboard
import sqlite3
from datetime import datetime

router = Router()
edit_state = {}

@router.message(Command("edit_profile"))
async def edit_profile_command(message: types.Message):
    telegram_id = str(message.from_user.id)
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    if not c.fetchone():
        await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        conn.close()
        return
    conn.close()

    edit_state[message.chat.id] = {"step": "choose"}
    await message.answer("–©–æ —Å–∞–º–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏? üëá", reply_markup=edit_profile_keyboard())

@router.message(lambda m: m.text.lower().strip() == "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")
async def open_edit_profile(message: types.Message):
    await edit_profile_command(message)

@router.message()
async def handle_editing(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in edit_state:
        return

    state = edit_state[chat_id]

    if state.get("step") == "choose":
        if "—ñ–º‚Äô—è" in text:
            state["field"] = "full_name"
            state["step"] = "edit"
            await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        elif "–Ω–æ–º–µ—Ä" in text:
            state["field"] = "phone_number"
            state["step"] = "edit"
            await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        elif "–≥—Ä—É–ø—É" in text:
            state["field"] = "group_name"
            state["step"] = "edit"
            await message.answer("üéì –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏:")
        elif "—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å" in text:
            state["field"] = "specialty"
            state["step"] = "edit"
            await message.answer("üìò –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:")
        elif "–∫–∞—Ñ–µ–¥—Ä—É" in text:
            state["field"] = "department"
            state["step"] = "edit"
            await message.answer("üèõ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –∫–∞—Ñ–µ–¥—Ä–∏:")
        elif "–¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è" in text:
            state["field"] = "birth_date"
            state["step"] = "edit"
            await message.answer("üéÇ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:")
        elif "—Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É" in text:
            state["field"] = "graduation_year"
            state["step"] = "edit"
            await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2020):")
        elif "–≤–∏–π—Ç–∏" in text.lower():
            del edit_state[chat_id]
            await message.answer("‚úÖ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")

    elif state["step"] == "edit":
        telegram_id = str(message.from_user.id)
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()

        if state["field"] == "specialty":
            matches = search_specialty(text)
            if not matches:
                conn.close()
                await message.answer("‚ùå –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
                return
            elif len(matches) > 1:
                conn.close()
                options = "\n".join([f"{m['code']} ‚Äì {m['name']}" for m in matches])
                await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞:\n{options}\n–í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ:")
                return
            specialty = matches[0]
            c.execute("SELECT id FROM specialties WHERE code=? AND name=?", (specialty["code"], specialty["name"]))
            row = c.fetchone()
            if not row:
                conn.close()
                await message.answer("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")
                return
            c.execute("UPDATE users SET specialty_id = ? WHERE telegram_id = ?", (row[0], telegram_id))
            await message.answer(f"‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {specialty['name']} ({specialty['code']})")

        elif state["field"] == "department":
            department_name = normalize_department(text)
            if not department_name:
                conn.close()
                await message.answer("‚ö†Ô∏è –ö–∞—Ñ–µ–¥—Ä–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
            c.execute("SELECT id FROM departments WHERE name=?", (department_name,))
            row = c.fetchone()
            if not row:
                conn.close()
                await message.answer("‚ùå –ö–∞—Ñ–µ–¥—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            c.execute("UPDATE users SET department_id = ? WHERE telegram_id = ?", (row[0], telegram_id))
            await message.answer(f"‚úÖ –ö–∞—Ñ–µ–¥—Ä—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {department_name}")

        elif state["field"] == "group_name":
            try:
                c.execute("ALTER TABLE users ADD COLUMN group_name TEXT")
            except sqlite3.OperationalError:
                pass
            c.execute("UPDATE users SET group_name = ? WHERE telegram_id = ?", (text, telegram_id))
            await message.answer(f"‚úÖ –ì—Ä—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {text}")

        elif state["field"] == "phone_number":
            if not is_valid_phone(text):
                conn.close()
                await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
            c.execute("UPDATE users SET phone_number = ? WHERE telegram_id = ?", (text, telegram_id))
            await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")

        elif state["field"] == "birth_date":
            try:
                birth_date = datetime.strptime(text, "%Y-%m-%d").date()
                c.execute("UPDATE users SET birth_date = ? WHERE telegram_id = ?", (str(birth_date), telegram_id))
                await message.answer(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {birth_date}")
            except ValueError:
                conn.close()
                await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–†–†–†–†-–ú–ú-–î–î).")
                return

        elif state["field"] == "graduation_year":
            if not text.isdigit():
                conn.close()
                await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
                return
            c.execute("UPDATE users SET graduation_year = ? WHERE telegram_id = ?", (int(text), telegram_id))
            await message.answer(f"‚úÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {text}")

        else:
            column = state["field"]
            c.execute(f"UPDATE users SET {column} = ? WHERE telegram_id = ?", (text, telegram_id))
            await message.answer("‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

        conn.commit()
        conn.close()

        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        edit_state[chat_id] = {"step": "choose"}
        await message.answer("‚úÖ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?", reply_markup=edit_profile_keyboard())