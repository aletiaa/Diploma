from aiogram import Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from .utils.event_utils import load_events, save_events, get_next_event_id, update_event, delete_event
from ...utils.keyboard import admin_main_menu_keyboard, event_edit_menu_keyboard
from ...database.queries import get_connection

router = Router()

class EventEditState(StatesGroup):
    choosing_event = State()
    editing_title = State()
    editing_description = State()
    editing_datetime = State()
    editing_seats = State()

@router.callback_query(lambda c: c.data == "edit_event")
async def list_events_for_edit(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    events = load_events()
    if not events:
        await callback.message.answer("üì≠ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–¥—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=event['title'], callback_data=f"edit_event_{event['id']}")]
        for event in events
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]])

    await callback.message.answer("üõ† –û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    await state.set_state(EventEditState.choosing_event)

@router.callback_query(lambda c: c.data.startswith("edit_event_"))
async def start_edit(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(event_id=event_id)
    keyboard = event_edit_menu_keyboard(event_id)
    await callback.message.answer("–©–æ —Å–∞–º–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "edit_title")
async def edit_title(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:")
    await state.set_state(EventEditState.editing_title)

@router.message(EventEditState.editing_title)
async def save_new_title(message: Message, state: FSMContext):
    data = await state.get_data()
    update_event(data['event_id'], title=message.text.strip())
    await message.answer("‚úÖ –ù–∞–∑–≤—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(lambda c: c.data == "edit_description")
async def edit_description(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó:")
    await state.set_state(EventEditState.editing_description)

@router.message(EventEditState.editing_description)
async def save_new_description(message: Message, state: FSMContext):
    data = await state.get_data()
    update_event(data['event_id'], description=message.text.strip())
    await message.answer("‚úÖ –û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(lambda c: c.data == "edit_datetime")
async def edit_datetime(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM:")
    await state.set_state(EventEditState.editing_datetime)

@router.message(EventEditState.editing_datetime)
async def save_new_datetime(message: Message, state: FSMContext):
    from datetime import datetime
    try:
        new_dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M").isoformat()
        data = await state.get_data()
        update_event(data['event_id'], datetime=new_dt)
        await message.answer("‚úÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω—ñ.")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM")
        return
    await state.clear()

@router.callback_query(lambda c: c.data == "edit_seats")
async def edit_seats(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üéü –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:")
    await state.set_state(EventEditState.editing_seats)

@router.message(EventEditState.editing_seats)
async def save_new_seats(message: Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    new_seats = int(message.text.strip())
    data = await state.get_data()
    update_event(data['event_id'], max_seats=new_seats, available_seats=new_seats)
    await message.answer("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(lambda c: c.data == "confirm_delete_event")
async def confirm_delete_event(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_event")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="edit_event")]
    ])
    await callback.message.answer("‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø–æ–¥—ñ—é?", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "delete_event")
async def delete_selected_event(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    delete_event(data['event_id'])
    await callback.message.answer("üóë –ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(lambda c: c.data == "view_registered")
async def view_registered_users(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    event_id = data['event_id']

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT full_name FROM registrations JOIN users ON registrations.telegram_id = users.telegram_id WHERE registrations.event_id = ?", (event_id,))
    users = [row[0] for row in cursor.fetchall()]
    conn.close()

    if users:
        await callback.message.answer(f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n\n" + "\n".join(users))
    else:
        await callback.message.answer("üì≠ –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –Ω–∞ —Ü—é –ø–æ–¥—ñ—é.")

@router.callback_query(lambda c: c.data == "sync_event")
async def sync_event_to_db(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    event_id = data['event_id']

    event = next((e for e in load_events() if e['id'] == event_id), None)
    if not event:
        await callback.message.answer("‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É JSON.")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO events (id, title, description, event_datetime, max_seats, available_seats)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (
        event['id'],
        event['title'],
        event['description'],
        event['datetime'],
        event['max_seats'],
        event['available_seats']
    ))
    conn.commit()
    conn.close()

    await callback.message.answer("‚úÖ –ü–æ–¥—ñ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")