import sqlite3
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ...utils.phone_validator import is_valid_phone
from ...database.queries import get_connection
from ...utils.keyboard import admin_main_menu_keyboard

router = Router()

# –°—Ç–µ–π—Ç–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É –∞–¥–º—ñ–Ω–∞
class AdminLogin(StatesGroup):
    phone_number = State()
    password = State()
    attempts = State()

# –°—Ç–∞—Ä—Ç –ª–æ–≥—ñ–Ω—É –∞–¥–º—ñ–Ω–∞
@router.message(Command("login_admin"))
async def start_admin_login(message: Message, state: FSMContext):
    await state.update_data(attempts=3)
    await message.answer("üì≤ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥—É:")
    await state.set_state(AdminLogin.phone_number)

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(AdminLogin.phone_number)
async def process_admin_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone_number=phone)
    await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminLogin.password)

# –û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–æ–ª—è
@router.message(AdminLogin.password)
async def process_admin_password(message: Message, state: FSMContext):
    password_input = message.text.strip()
    data = await state.get_data()
    phone = data['phone_number']
    attempts_left = data.get('attempts', 3)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, full_name, password FROM admins
        WHERE phone_number = ?
    ''', (phone,))
    admin = cursor.fetchone()
    conn.close()

    if admin and admin[2] == password_input:
        await message.answer(f"‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—é, {admin[1]} (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä).", reply_markup=admin_main_menu_keyboard)
        await state.clear()
    else:
        attempts_left -= 1
        if attempts_left <= 0:
            await message.answer("‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.clear()
        else:
            await state.update_data(attempts=attempts_left)
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {attempts_left}.\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–µ —Ä–∞–∑:")
            await state.set_state(AdminLogin.phone_number)
