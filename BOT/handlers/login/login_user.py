import re
import sqlite3
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ...utils.phone_validator import is_valid_phone
from ...database.queries import get_connection
from ...utils.keyboard import user_main_menu_keyboard

router = Router()

# –°—Ç–µ–π—Ç–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É
class UserLogin(StatesGroup):
    phone_number = State()
    group_name = State()
    attempts = State()

# –°—Ç–∞—Ä—Ç –ª–æ–≥—ñ–Ω—É
@router.message(Command("login_user"))
async def start_user_login(message: Message, state: FSMContext):
    await state.update_data(attempts=3)  # 3 —Å–ø—Ä–æ–±–∏
    await message.answer("üì≤ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥—É:")
    await state.set_state(UserLogin.phone_number)

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(UserLogin.phone_number)
async def process_login_phone(message: Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        phone = message.text.strip()
    else:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —è–∫ —Ç–µ–∫—Å—Ç –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone_number=phone)
    await message.answer("üî¢ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12):")
    await state.set_state(UserLogin.group_name)

# –û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω—É
@router.message(UserLogin.group_name)
async def process_login_group(message: Message, state: FSMContext):
    group = message.text.strip().upper()
    data = await state.get_data()
    attempts_left = data.get('attempts', 3)

    if not re.match(r"^[–ê-–ØA-Z]{2}-\d{2}$", group):
        await message.answer("‚ùå –ì—Ä—É–ø–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 2 –ª—ñ—Ç–µ—Ä–∏, —Ç–∏—Ä–µ, 2 —Ü–∏—Ñ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12). –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    phone = data['phone_number']

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, full_name FROM users
        WHERE phone_number = ? AND group_name = ?
    ''', (phone, group))
    user = cursor.fetchone()
    conn.close()

    if user:
        await message.answer(f"‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—é, {user[1]}!", reply_markup=user_main_menu_keyboard)
        await state.clear()
    else:
        attempts_left -= 1
        if attempts_left <= 0:
            await message.answer("‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.clear()
        else:
            await state.update_data(attempts=attempts_left)
            await message.answer(f"‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {attempts_left}.\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–µ —Ä–∞–∑:")
            await state.set_state(UserLogin.phone_number)
