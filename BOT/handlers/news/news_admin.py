import sqlite3
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ...database.queries import get_connection
from ...utils.keyboard import admin_main_menu_keyboard, news_admin_menu_keyboard

router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è –Ω–æ–≤–∏–Ω
class NewsStates(StatesGroup):
    waiting_short_desc = State()
    waiting_full_desc = State()
    waiting_link = State()
    waiting_date = State()
    waiting_news_id_to_edit = State()
    waiting_new_short_desc = State()
    waiting_news_id_to_delete = State()
    waiting_news_id_to_view = State()

# --- –ú–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ --- #
@router.callback_query(lambda c: c.data == "news_menu")
async def show_news_menu(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("üì∞ <b>–ú–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏:</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                                           reply_markup=news_admin_menu_keyboard, parse_mode="HTML")
    await state.clear()

# --- –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É --- #
@router.callback_query(lambda c: c.data == "add_news")
async def add_news_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚ûï –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏:")
    await state.set_state(NewsStates.waiting_short_desc)

@router.message(NewsStates.waiting_short_desc)
async def add_news_full_desc(message: Message, state: FSMContext):
    await state.update_data(short_desc=message.text.strip())
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏:")
    await state.set_state(NewsStates.waiting_full_desc)

@router.message(NewsStates.waiting_full_desc)
async def add_news_link(message: Message, state: FSMContext):
    await state.update_data(full_desc=message.text.strip())
    await message.answer("üîó –í–≤–µ–¥—ñ—Ç—å –æ—Ñ—ñ—Ü—ñ–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω—É:")
    await state.set_state(NewsStates.waiting_link)

@router.message(NewsStates.waiting_link)
async def add_news_date(message: Message, state: FSMContext):
    await state.update_data(link=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–æ–≤–∏–Ω–∏ (–î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(NewsStates.waiting_date)

@router.message(NewsStates.waiting_date)
async def save_news(message: Message, state: FSMContext):
    date = message.text.strip()
    data = await state.get_data()

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO news (short_description, full_description, date, link)
        VALUES (?, ?, ?, ?)
    ''', (data['short_desc'], data['full_desc'], date, data['link']))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ù–æ–≤–∏–Ω—É –¥–æ–¥–∞–Ω–æ!")
    await show_news_menu(message, state)

# --- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏ (—Å–ø–∏—Å–æ–∫) --- #
@router.callback_query(lambda c: c.data == "list_news")
async def list_news(callback_query: CallbackQuery, state: FSMContext):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, short_description, date FROM news ORDER BY date DESC")
    news = cursor.fetchall()
    conn.close()

    if not news:
        text = "‚ùå –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω."
    else:
        text = "\n\n".join([f"üÜî {n[0]} | üìÖ {n[2]}\n{n[1]}" for n in news])

    await callback_query.message.edit_text(f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω:</b>\n\n{text}", 
                                           parse_mode="HTML", reply_markup=news_admin_menu_keyboard)

# --- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –Ω–æ–≤–∏–Ω—É --- #
@router.callback_query(lambda c: c.data == "view_news")
async def view_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üîç –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:")
    await state.set_state(NewsStates.waiting_news_id_to_view)

@router.message(NewsStates.waiting_news_id_to_view)
async def view_news_detail(message: Message, state: FSMContext):
    news_id = message.text.strip()
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT short_description, full_description, date, link FROM news WHERE id = ?", (news_id,))
    news = cursor.fetchone()
    conn.close()

    if news:
        text = (
            f"üì∞ <b>–ù–æ–≤–∏–Ω–∞ #{news_id}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {news[2]}\n"
            f"‚úèÔ∏è –ö–æ—Ä–æ—Ç–∫–æ: {news[0]}\n\n"
            f"{news[1]}\n\n"
            f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {news[3]}"
        )
    else:
        text = "‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(text, parse_mode="HTML")
    await show_news_menu(message, state)

# --- –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É --- #
@router.callback_query(lambda c: c.data == "delete_news")
async def delete_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    await state.set_state(NewsStates.waiting_news_id_to_delete)

@router.message(NewsStates.waiting_news_id_to_delete)
async def delete_news_confirm(message: Message, state: FSMContext):
    news_id = message.text.strip()
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ù–æ–≤–∏–Ω—É –∑ ID {news_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await show_news_menu(message, state)

# --- –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É --- #
@router.callback_query(lambda c: c.data == "edit_news")
async def edit_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å):")
    await state.set_state(NewsStates.waiting_news_id_to_edit)

@router.message(NewsStates.waiting_news_id_to_edit)
async def edit_news_short_desc(message: Message, state: FSMContext):
    news_id = message.text.strip()
    await state.update_data(news_id=news_id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT short_description FROM news WHERE id = ?", (news_id,))
    news = cursor.fetchone()
    conn.close()

    if news:
        await message.answer(f"–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n{news[0]}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:")
        await state.set_state(NewsStates.waiting_new_short_desc)
    else:
        await message.answer("‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await show_news_menu(message, state)

@router.message(NewsStates.waiting_new_short_desc)
async def save_edited_news(message: Message, state: FSMContext):
    new_short_desc = message.text.strip()
    data = await state.get_data()
    news_id = data.get("news_id")

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE news SET short_description = ? WHERE id = ?", (new_short_desc, news_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏ #{news_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await show_news_menu(message, state)
