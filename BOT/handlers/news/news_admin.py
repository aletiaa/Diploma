import json
import sqlite3
from datetime import datetime
from typing import Union

from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import nltk

from ...database.queries import get_connection
from ...utils.keyboard import news_admin_menu_keyboard
from .services.news_utils import generate_short_title, is_valid_url, save_news_to_db, save_news_to_json

nltk.download('stopwords')

router = Router()
tokenizer = AutoTokenizer.from_pretrained("d0p3/O3ap-sm")
model = AutoModelForSeq2SeqLM.from_pretrained("d0p3/O3ap-sm")

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω —É JSON
JSON_FILE = "news_backup.json"

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è –Ω–æ–≤–∏–Ω
class NewsStates(StatesGroup):
    waiting_full_desc = State()
    waiting_link = State()
    waiting_date = State()
    waiting_news_id_to_edit = State()
    waiting_new_short_desc = State()
    waiting_news_id_to_delete = State()
    waiting_news_id_to_view = State()


@router.callback_query(lambda c: c.data == "news_menu")
async def show_news_menu(event: Union[CallbackQuery, Message], state: FSMContext):
    text = "üì∞ <b>–ú–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏:</b>\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=news_admin_menu_keyboard, parse_mode="HTML")
    else:
        await event.answer(text, reply_markup=news_admin_menu_keyboard, parse_mode="HTML")
    await state.clear()


@router.callback_query(lambda c: c.data == "add_news")
async def add_news_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏:")
    await state.set_state(NewsStates.waiting_full_desc)


@router.message(NewsStates.waiting_full_desc)
async def handle_full_desc(message: Message, state: FSMContext):
    full_desc = message.text.strip()
    await state.update_data(full_desc=full_desc)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–¥–µ–ª—ñ Hugging Face
    short_desc = generate_short_title(full_desc)

    await state.update_data(short_desc=short_desc)

    await message.answer(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n<code>{short_desc}</code>", parse_mode="HTML")
    await message.answer("üîó –í–≤–µ–¥—ñ—Ç—å –æ—Ñ—ñ—Ü—ñ–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω—É:")
    await state.set_state(NewsStates.waiting_link)


@router.message(NewsStates.waiting_link)
async def handle_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–æ–≤–∏–Ω–∏ (–î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(NewsStates.waiting_date)


@router.message(NewsStates.waiting_date)
async def save_news(message: Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        news_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")
        return

    if news_date > datetime.today().date():
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.")
        return

    iso_date = news_date.isoformat() 

    if news_date > datetime.today().date():
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.")
        return

    data = await state.get_data()

    if not is_valid_url(data['link']):
        await message.answer("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ:")
        return

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–∫—Ä–µ–º—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    save_news_to_db(data['short_desc'], data['full_desc'], date_str, data['link'])
    save_news_to_json(data['short_desc'], data['full_desc'], date_str, data['link'])

    await message.answer("‚úÖ –ù–æ–≤–∏–Ω—É –¥–æ–¥–∞–Ω–æ!")
    await show_news_menu(message, state)

@router.callback_query(lambda c: c.data == "list_news")
async def list_news(callback_query: CallbackQuery, state: FSMContext):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, short_description, date FROM news ORDER BY date DESC")
    news = cursor.fetchall()
    conn.close()

    text = "\n\n".join([f"üÜî {n[0]} | üìÖ {n[2]}\n{n[1]}" for n in news]) if news else "‚ùå –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω."

    await callback_query.message.answer(f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω:</b>\n\n{text}",
                                        parse_mode="HTML", reply_markup=news_admin_menu_keyboard)


@router.callback_query(lambda c: c.data == "view_news")
async def view_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üîç –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:")
    await state.set_state(NewsStates.waiting_news_id_to_view)


@router.message(NewsStates.waiting_news_id_to_view)
async def view_news_detail(message: Message, state: FSMContext):
    news_id = message.text.strip()
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT short_description, full_description, date, link FROM news WHERE id = ?", (news_id,))
    news = cursor.fetchone()
    conn.close()

    if news:
        text = (
            f"üì∞ <b>–ù–æ–≤–∏–Ω–∞ #{news_id}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {news[2]}\n"
            f"‚úèÔ∏è –ö–æ—Ä–æ—Ç–∫–æ: {news[0]}\n\n"
            f"{news[1]}\n\n"
            f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {news[3]}"
        )
    else:
        text = "‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(text, parse_mode="HTML")
    await show_news_menu(message, state)


@router.callback_query(lambda c: c.data == "delete_news")
async def delete_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    await state.set_state(NewsStates.waiting_news_id_to_delete)


@router.message(NewsStates.waiting_news_id_to_delete)
async def delete_news_confirm(message: Message, state: FSMContext):
    news_id = message.text.strip()
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM news WHERE id = ?", (news_id,))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ù–æ–≤–∏–Ω—É –∑ ID {news_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await show_news_menu(message, state)


@router.callback_query(lambda c: c.data == "news_edit")
async def edit_news_prompt(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:")
    await state.set_state(NewsStates.waiting_news_id_to_edit)


@router.message(NewsStates.waiting_news_id_to_edit)
async def edit_news_short_desc(message: Message, state: FSMContext):
    news_id = message.text.strip()
    await state.update_data(news_id=news_id)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT short_description FROM news WHERE id = ?", (news_id,))
    news = cursor.fetchone()
    conn.close()

    if news:
        await message.answer(f"–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n{news[0]}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:")
        await state.set_state(NewsStates.waiting_new_short_desc)
    else:
        await message.answer("‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await show_news_menu(message, state)


@router.message(NewsStates.waiting_new_short_desc)
async def save_edited_news(message: Message, state: FSMContext):
    new_short_desc = message.text.strip()
    data = await state.get_data()
    news_id = data.get("news_id")

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE news SET short_description = ? WHERE id = ?", (new_short_desc, news_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏ #{news_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await show_news_menu(message, state)
