import sqlite3
import random
import string
import re
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ...config import SUPER_ADMIN_ID
from ...database.queries import get_connection
from ...utils.phone_validator import is_valid_phone  
from ...utils.keyboard import request_phone_keyboard

router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω–∞
class AdminRegistration(StatesGroup):
    full_name = State()
    phone_number = State()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—é
def generate_random_password(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

# –°—Ç–∞—Ä—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω–∞
@router.message(Command('register_admin'))
async def start_admin_register(message: Message, state: FSMContext):
    await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:")
    await state.set_state(AdminRegistration.full_name)

@router.message(AdminRegistration.full_name)
async def admin_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+ [–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+$", full_name):
        await message.answer("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –¥–≤–æ—Ö —Å–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(full_name=full_name)
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380501234567):", reply_markup=request_phone_keyboard)
    await state.set_state(AdminRegistration.phone_number)

@router.message(AdminRegistration.phone_number)
async def admin_phone_number(message: Message, state: FSMContext, bot: Bot):
    phone = message.contact.phone_number if message.contact else message.text.strip() if message.text else ""

    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380501234567:")
        return

    await message.answer("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–π–Ω—è—Ç–æ.", reply_markup=ReplyKeyboardRemove())
    
    await state.update_data(phone_number=phone)
    data = await state.get_data()
    password = generate_random_password()
    telegram_id = str(message.from_user.id)

    conn = get_connection()
    cursor = conn.cursor()

    # –ß–∏ –≤–∂–µ —î —Ç–∞–∫–∞ –∑–∞—è–≤–∫–∞?
    cursor.execute("SELECT 1 FROM admin_requests WHERE telegram_id = ?", (telegram_id,))
    if cursor.fetchone():
        await message.answer("üïì –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∂–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ.")
        return

    try:
        cursor.execute("""
            INSERT INTO admin_requests (telegram_id, full_name, phone_number, password)
            VALUES (?, ?, ?, ?)
        """, (telegram_id, data["full_name"], phone, password))
        conn.commit()
    except sqlite3.IntegrityError:
        await message.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        return

    await message.answer("‚úÖ –ó–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    await bot.send_message(
        SUPER_ADMIN_ID,
        f"üõÇ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        f"üë§ –Ü–º'—è: {data['full_name']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüÜî Telegram ID: {telegram_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"approve_admin_{telegram_id}")],
            [InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_admin_{telegram_id}")]
        ])
    )
    await state.clear()

# ‚úÖ –°—Ö–≤–∞–ª–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.callback_query(lambda c: c.data.startswith("approve_admin_"))
async def approve_admin(callback: CallbackQuery, bot: Bot):
    telegram_id = callback.data.split("_")[-1]
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT full_name, phone_number, password FROM admin_requests WHERE telegram_id = ?", (telegram_id,))
    row = cursor.fetchone()
    if not row:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    full_name, phone_number, password = row

    cursor.execute("SELECT 1 FROM admins WHERE telegram_id = ?", (telegram_id,))
    if cursor.fetchone():
        await callback.message.answer("‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î.")
        return

    cursor.execute("""
        INSERT INTO admins (telegram_id, full_name, phone_number, password)
        VALUES (?, ?, ?, ?)
    """, (telegram_id, full_name, phone_number, password))
    cursor.execute("DELETE FROM admin_requests WHERE telegram_id = ?", (telegram_id,))
    conn.commit()

    await callback.message.answer("‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
    await bot.send_message(
        chat_id=telegram_id,
        text=(
            "üéâ –í–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            f"üë§ –ü–Ü–ë: {full_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
            f"üîê –í–∞—à –ø–∞—Ä–æ–ª—å: <code>{password}</code>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
        ),
        parse_mode="HTML"
    )


# ‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith("reject_admin_"))
async def reject_admin(callback: CallbackQuery, bot: Bot):
    telegram_id = callback.data.split("_")[-1]
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM admin_requests WHERE telegram_id = ?", (telegram_id,))
    conn.commit()
    await callback.message.answer("üö´ –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    await bot.send_message(telegram_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
