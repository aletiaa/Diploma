from aiogram import Router, types
from aiogram.filters import Command
from ...utils.keyboard import contact_request_keyboard, main_menu_keyboard
from ...utils.phone_validator import is_valid_phone
from .state import user_state
from .shared_registration_steps import (
    handle_contact,
    ask_for_phone_number,
    ask_about_old_number,
    ask_old_number_directly,
    ask_birth_date,
    ask_graduation_year,
    ask_department,
    ask_specialty,
    finalize_registration
)

import sqlite3
import json
from ...config import ADMIN_PASSWORD, ADMIN_TELEGRAM_IDS

router = Router()

@router.message(Command("start"))
async def start_admin(message: types.Message):
    chat_id = message.chat.id
    user_state[chat_id] = {"step": "start_choice"}
    await message.answer(
        "üîê –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\n"
        "<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b> ‚Äì —è–∫—â–æ –≤–∏ —Ç—É—Ç –≤–ø–µ—Ä—à–µ\n"
        "<b>–í—Ö—ñ–¥</b> ‚Äì —è–∫—â–æ –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ\n\n"
        "–í–≤–µ–¥—ñ—Ç—å <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b> –∞–±–æ <b>–≤—Ö—ñ–¥</b>:"
    )


@router.message(lambda message: message.contact is not None)
async def contact_handler(message: types.Message):
    return await handle_contact(message, role="admin")


@router.message()
async def admin_registration(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state.get(chat_id)

    if not state:
        return

    step = state.get("step")

    if step == "start_choice":
        if text.lower() in ["—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "—Ä"]:
            state["step"] = "admin_password"
            await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        elif text.lower() in ["–≤—Ö—ñ–¥", "–≤"]:
            state["step"] = "login_name"
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        else:
            await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b> –∞–±–æ <b>–≤—Ö—ñ–¥</b>.")

    elif step == "login_name":
        state["login_surname"] = text
        state["step"] = "login_phone"
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫–∏–π –≤–∏ –≤–∫–∞–∑—É–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")

    elif step == "login_phone":
        phone = text
        conn = sqlite3.connect("alumni.db")
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE full_name LIKE ? AND phone_number = ?", (f"%{state['login_surname']}%", phone))
        user = c.fetchone()
        conn.close()

        if not user or user[-3] != "admin":
            await message.answer("‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return

        state["step"] = "admin_password_login"
        state["login_user"] = user
        await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

    elif step == "admin_password_login":
        if text != ADMIN_PASSWORD:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await message.answer("‚úÖ –í—Ö—ñ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.",
                             reply_markup=main_menu_keyboard())
        del user_state[chat_id]

    elif step == "admin_password":
        if text == ADMIN_PASSWORD:
            if chat_id not in ADMIN_TELEGRAM_IDS:
                ADMIN_TELEGRAM_IDS.append(chat_id)
                try:
                    with open("admin_log.json", "r", encoding="utf-8") as f:
                        current_data = json.load(f)
                except:
                    current_data = {"admins": []}
                current_data["admins"].append(chat_id)
                with open("admin_log.json", "w", encoding="utf-8") as f:
                    json.dump(current_data, f, ensure_ascii=False, indent=2)

            state["role"] = "admin"
            state["step"] = "name"
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    elif step == "name":
        state["name"] = text
        return await ask_for_phone_number(message)

    elif step == "phone_number":
        if not is_valid_phone(text):
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        state["phone_number"] = text
        state["step"] = "ask_old_number"
        await message.answer("üì≤ –ß–∏ –º–∞–ª–∏ –≤–∏ —Ü–µ–π –Ω–æ–º–µ—Ä –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è? –í–≤–µ–¥—ñ—Ç—å <b>—Ç–∞–∫</b> –∞–±–æ <b>–Ω—ñ</b>.")

    elif step == "ask_old_number":
        await ask_about_old_number(message)

    elif step == "enter_old_number":
        await ask_old_number_directly(message)

    elif step == "birth_date":
        await ask_birth_date(message)

    elif step == "year":
        await ask_graduation_year(message)

    elif step == "department":
        await ask_department(message)

    elif step == "specialty":
        await ask_specialty(message)

    elif step == "finalize":
        await finalize_registration(message)
