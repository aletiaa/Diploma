import sqlite3
import re
from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ...utils.phone_validator import is_valid_phone
from ...utils.specialties import SPECIALTIES, search_specialty
from ...utils.department_recogniser import normalize_department
from ...utils.keyboard import request_phone_keyboard, main_menu_keyboard, user_main_menu_keyboard
from ...database.queries import get_connection

from datetime import datetime

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
conn = get_connection()
cursor = conn.cursor()

router = Router()

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
class Registration(StatesGroup):
    full_name = State()
    phone_number = State()
    old_phone_number_check = State()
    old_phone_number = State()
    enrollment_year = State()
    graduation_year = State()
    department_id = State()
    specialty_input = State()
    specialty_select = State()
    group_name = State()
    birth_date = State()
    ask_survey = State()

@router.callback_query(lambda c: c.data == 'register_user')
async def callback_register_user(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:")
    await state.set_state(Registration.full_name)

@router.callback_query(lambda c: c.data == 'register_admin')
async def callback_register_admin(callback_query: CallbackQuery):
    await callback_query.message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register_admin –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.callback_query(lambda c: c.data == 'help_info')
async def callback_help(callback_query: CallbackQuery):
    help_text = (
        "üëã <b>–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –≤–∏–ø—É—Å–∫–Ω–∏–∫—ñ–≤ –∫–∞—Ñ–µ–¥—Ä–∏ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –≤ –µ–Ω–µ—Ä–≥–µ—Ç–∏—Ü—ñ</b>.\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üîπ –ü—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∞–±–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç\n"
        "üîπ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "üîπ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
        "üîπ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ –Ω–∏—Ö\n"
        "üîπ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –π –≤—ñ–¥–µ–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ –º–∏–Ω—É–ª–∏—Ö –ø–æ–¥—ñ–π)\n"
        "üîπ –ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ —á–∞—Ç–∏ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞–º–∏ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é\n\n"
        "üîΩ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.\n"
        "–î–æ–ø–æ–º–æ–≥–∞: alina.seikauskaite3@gmail.com"
    )
    await callback_query.message.answer(help_text)


@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    help_text = (
        "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–ø—É—Å–∫–Ω–∏–∫—ñ–≤ –∫–∞—Ñ–µ–¥—Ä–∏ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –≤ –µ–Ω–µ—Ä–≥–µ—Ç–∏—Ü—ñ.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/menu ‚Äì –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/register_user ‚Äì –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n"
        "/register_admin ‚Äì –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "/help ‚Äì –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
    )
    await message.answer(help_text, reply_markup=main_menu_keyboard)


@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏ + –æ–¥–∏–Ω –ø—Ä–æ–±—ñ–ª
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+ [–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z]+$", full_name):
        await message.answer("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –¥–≤–æ—Ö —Å–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ). –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(full_name=full_name)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=request_phone_keyboard)
    await state.set_state(Registration.phone_number)


@router.message(Registration.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    contact = message.contact
    if contact:
        phone = contact.phone_number
    else:
        phone = message.text

    if not is_valid_phone(phone):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=request_phone_keyboard)
        return

    await state.update_data(phone_number=phone)
    await message.answer("–ß–∏ –∑–º—ñ–Ω—é–≤–∞–≤—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ —á–∞—Å—É –≤–∏–ø—É—Å–∫—É? (—Ç–∞–∫/–Ω—ñ)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.old_phone_number_check)

@router.message(Registration.old_phone_number_check)
async def process_old_phone_check(message: Message, state: FSMContext):
    if message.text.lower() == '—Ç–∞–∫':
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        await state.set_state(Registration.old_phone_number)
    else:
        data = await state.get_data()
        await state.update_data(old_phone_number=data['phone_number'])
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤—Å—Ç—É–ø—É:")
        await state.set_state(Registration.enrollment_year)

@router.message(Registration.old_phone_number)
async def process_old_phone_number(message: Message, state: FSMContext):
    await state.update_data(old_phone_number=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤—Å—Ç—É–ø—É:")
    await state.set_state(Registration.enrollment_year)

@router.message(Registration.enrollment_year)
async def process_enrollment_year(message: Message, state: FSMContext):
    year_str = message.text.strip()
    if not year_str.isdigit():
        await message.answer("–†—ñ–∫ –≤—Å—Ç—É–ø—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    year = int(year_str)
    current_year = datetime.today().year
    if year > current_year or year < 1975:
        await message.answer(f"–†—ñ–∫ –≤—Å—Ç—É–ø—É –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 1975 —Ç–∞ {current_year}. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(enrollment_year=year)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É:")
    await state.set_state(Registration.graduation_year)
   

@router.message(Registration.graduation_year)
async def process_graduation_year(message: Message, state: FSMContext):
    year_str = message.text.strip()

    if not year_str.isdigit():
        await message.answer("–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    graduation_year = int(year_str)
    current_year = datetime.today().year
    if graduation_year > current_year or graduation_year < 1975:
        await message.answer(f"–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 1975 —Ç–∞ {current_year}. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    enrollment_year = data.get("enrollment_year")

    if enrollment_year and graduation_year <= enrollment_year:
        await message.answer("–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∞–±–æ —Ä—ñ–≤–Ω–∏–º —Ä–æ–∫—É –≤—Å—Ç—É–ø—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(graduation_year=graduation_year)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–ï–§, –ê–ü–ï–ü–°, –ù–ù–Ü–ê–¢–ï):")
    await state.set_state(Registration.department_id)


@router.message(Registration.department_id)
async def process_department(message: Message, state: FSMContext):
    department = normalize_department(message.text)

    if not department:
        await message.answer(
            "–ù–∞ –∂–∞–ª—å, –º–∏ –º–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ª–∏—à–µ –¥–ª—è –¢–µ–ø–ª–æ–µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É, –∫–∞—Ñ–µ–¥—Ä–∞ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –≤ –µ–Ω–µ—Ä–≥–µ—Ç–∏—Ü—ñ.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–ï–§, –ê–ü–ï–ü–°, –ù–ù–Ü–ê–¢–ï):"
        )
        return  # –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω, –¥–∞—î–º–æ —â–µ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É

    await state.update_data(department_id=department)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –≤–∞—à–æ—ó —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:")
    await state.set_state(Registration.specialty_input)


@router.message(Registration.specialty_input)
async def process_specialty_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    results = search_specialty(user_input)
    
    if not results:
        await message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —É—Ç–æ—á–Ω—ñ—Ç—å –∫–æ–¥/–Ω–∞–∑–≤—É:")
        return
    
    if len(results) == 1:
        specialty = results[0]
        await state.update_data(specialty_id=specialty['id'])
        await message.answer(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {specialty['code']} - {specialty['name']}")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:")
        await state.set_state(Registration.group_name)
    else:
        reply = "–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π:\n"
        for idx, s in enumerate(results, start=1):
            reply += f"{idx}. {s['code']} - {s['name']}\n"
        reply += "\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:"
        await state.update_data(specialty_options=results)
        await message.answer(reply)
        await state.set_state(Registration.specialty_select)

@router.message(Registration.specialty_select)
async def process_specialty_selection(message: Message, state: FSMContext):
    data = await state.get_data()
    options = data.get('specialty_options', [])
    
    try:
        choice = int(message.text.strip()) - 1
        specialty = options[choice]
        await state.update_data(specialty_id=specialty['id'])
        await message.answer(f"–û–±—Ä–∞–Ω–æ: {specialty['code']} - {specialty['name']}")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:")
        await state.set_state(Registration.group_name)
    except (ValueError, IndexError):
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@router.message(Registration.group_name)
async def process_group_name(message: Message, state: FSMContext):
    group = message.text.strip().upper()

    if not re.match(r"^[–ê-–ØA-Z]{2}-\d{2}$", group):
        await message.answer("–ì—Ä—É–ø–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 2 –ª—ñ—Ç–µ—Ä–∏, —Ç–∏—Ä–µ, 2 —Ü–∏—Ñ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12). –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return

    await state.update_data(group_name=group)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(Registration.birth_date)

@router.message(Registration.ask_survey)
async def handle_survey_response(message: Message, state: FSMContext):
    text = message.text.lower().strip()

    if text in ["—Ç–∞–∫", "—Ça–∫", "yes", "y", "–∞–≥–∞", "–¥–∞"]:
        await message.answer("üîó –î—è–∫—É—î–º–æ! –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:\nhttps://forms.gle/72mwaXVePPU5xVHK8")
    else:
        await message.answer("üôå –î–æ–±—Ä–µ, –º–æ–∂–ª–∏–≤–æ –ø—ñ–∑–Ω—ñ—à–µ!")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    await message.answer("üè† –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é:", reply_markup=user_main_menu_keyboard)
    await state.clear()

@router.message(Registration.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    birth_date_str = message.text.strip()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞ –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ –¥–∞—Ç–∏
        birth_date = datetime.strptime(birth_date_str, "%d.%m.%Y")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–∫—É: –º—ñ–Ω—ñ–º—É–º 16 —Ä–æ–∫—ñ–≤
        today = datetime.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        
        if age < 16 or age > 95:
            await message.answer("–í–∞–º –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 16 —Ä–æ–∫—ñ–≤ —Ç–∞, –Ω–∞ –∂–∞–ª—å, –Ω–µ –±—ñ–ª—å—à–µ 95 –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
            return

    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")
        return

    await state.update_data(birth_date=birth_date_str)
    data = await state.get_data()

    conn = get_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('''
            INSERT INTO users (
                telegram_id, full_name, phone_number, old_phone_number, enrollment_year,
                graduation_year, department_id, specialty_id, group_name, birth_date
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            str(message.from_user.id),
            data['full_name'],
            data['phone_number'],
            data['old_phone_number'],
            data['enrollment_year'],
            data['graduation_year'],
            data['department_id'],
            data['specialty_id'],
            data['group_name'],
            data['birth_date']
        ))
        conn.commit()
        await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await message.answer("üìù –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è? (—Ç–∞–∫/–Ω—ñ)")
        await state.set_state(Registration.ask_survey)

    except sqlite3.IntegrityError:
        await message.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
    finally:
        conn.close()
