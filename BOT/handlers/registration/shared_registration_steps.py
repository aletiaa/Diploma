import sqlite3
from aiogram import types
from datetime import datetime
from ...utils.specialties import search_specialty
from ...utils.department_recogniser import normalize_department
from ...utils.keyboard import contact_request_keyboard, main_menu_keyboard
from ...utils.phone_validator import is_valid_phone
from ..registration.state import user_state


async def handle_contact(message: types.Message, role: str):
    chat_id = message.chat.id
    contact = message.contact.phone_number

    if chat_id not in user_state:
        user_state[chat_id] = {"step": "ask_old_number", "role": role}

    state = user_state[chat_id]
    state["phone_number"] = contact
    state["step"] = "ask_old_number"

    await message.answer("üì© –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ.\n"
                         "–ß–∏ –º–∞–ª–∏ –≤–∏ —Ü–µ–π –Ω–æ–º–µ—Ä –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è?\n"
                         "–í–≤–µ–¥—ñ—Ç—å <b>—Ç–∞–∫</b> –∞–±–æ <b>–Ω—ñ</b>:",
                         reply_markup=types.ReplyKeyboardRemove())


async def ask_for_phone_number(message: types.Message):
    chat_id = message.chat.id
    user_state[chat_id]["step"] = "phone_number"
    await message.answer("üì± –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ):",
                         reply_markup=contact_request_keyboard())


async def ask_about_old_number(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    state = user_state[chat_id]

    if text not in ["—Ç–∞–∫", "–Ω—ñ"]:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ <b>—Ç–∞–∫</b> –∞–±–æ <b>–Ω—ñ</b>.")
        return

    if text == "—Ç–∞–∫":
        state["old_phone_number"] = state["phone_number"]
        state["step"] = "birth_date"
        await message.answer("üéÇ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:")
    else:
        state["step"] = "enter_old_number"
        await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à <b>—Å—Ç–∞—Ä–∏–π</b> –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫–∏–π –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è:")


async def ask_old_number_directly(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state[chat_id]

    if not is_valid_phone(text):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    state["old_phone_number"] = text
    state["step"] = "birth_date"
    await message.answer("üéÇ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:")


async def ask_birth_date(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state[chat_id]

    try:
        birth_date = datetime.strptime(text, "%Y-%m-%d").date()
        state["birth_date"] = str(birth_date)
        state["step"] = "year"
        await message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2022):")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–†–†–†–†-–ú–ú-–î–î):")


async def ask_graduation_year(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state[chat_id]

    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return

    state["year"] = int(text)
    state["step"] = "department"
    await message.answer("üè´ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –∫–∞—Ñ–µ–¥—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¢–ï–§):")


async def ask_department(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state[chat_id]

    department_name = normalize_department(text)
    if not department_name:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT id FROM departments WHERE name = ?", (department_name,))
    row = c.fetchone()
    conn.close()

    if not row:
        await message.answer("üìõ –ö–∞—Ñ–µ–¥—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ.")
        return

    state["department_id"] = row[0]
    state["step"] = "specialty"
    await message.answer("üìò –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:")


async def ask_specialty(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state[chat_id]

    matches = search_specialty(text)
    if not matches:
        await message.answer("‚ùå –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    elif len(matches) > 1:
        options = "\n".join([f"{m['code']} ‚Äì {m['name']}" for m in matches])
        await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞:\n{options}\n–í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ:")
        return

    specialty = matches[0]
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT id FROM specialties WHERE code = ? AND name = ?", (specialty['code'], specialty['name']))
    row = c.fetchone()

    if not row:
        await message.answer("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —É –±–∞–∑—ñ.")
        return

    specialty_id = row[0]
    state["specialty_id"] = specialty_id
    state["step"] = "finalize"
    await finalize_registration(message)


async def finalize_registration(message: types.Message):
    chat_id = message.chat.id
    state = user_state[chat_id]

    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute('''
        INSERT OR REPLACE INTO users 
        (telegram_id, full_name, phone_number, old_phone_number, graduation_year, department_id, specialty_id, role, birth_date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        str(message.from_user.id),
        state["name"],
        state["phone_number"],
        state.get("old_phone_number", ""),
        state["year"],
        state["department_id"],
        state["specialty_id"],
        state["role"],
        state["birth_date"]
    ))
    conn.commit()
    conn.close()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ñ–µ–¥—Ä–∏
    conn = sqlite3.connect("alumni.db")
    c = conn.cursor()
    c.execute("SELECT name FROM departments WHERE id = ?", (state["department_id"],))
    department_name = c.fetchone()[0]

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ
    c.execute("SELECT name FROM specialties WHERE id = ?", (state["specialty_id"],))
    specialty_name = c.fetchone()[0]
    conn.close()

    await message.answer(
        f"üìù –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫:\n"
        f"üë§ –Ü–º‚Äô—è: <b>{state['name']}</b>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{state['phone_number']}</b>\n"
        f"üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: <b>{state['year']}</b>\n"
        f"üèõ –ö–∞—Ñ–µ–¥—Ä–∞: <b>{department_name}</b>\n"
        f"üìò –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: <b>{specialty_name}</b>\n"
        f"üîê –†–æ–ª—å: <b>{state['role']}</b>\n\n"
        "‚ùì –ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ? –í–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    )

    del user_state[chat_id]

    await message.answer(
        f"üéâ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, <b>{state['name']}</b>!\n"
        f"üîΩ –û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:",
        reply_markup=main_menu_keyboard()
    )

    if state["role"] == "admin":
        await message.answer("üîß –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –í–≤–µ–¥—ñ—Ç—å /admin_panel —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è.")
