from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram import Bot
from ..database.queries import get_connection
from ..handlers.events.utils.event_utils import load_events
import asyncio


def start_reminder_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"""
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_event_reminders, trigger='interval', minutes=5, kwargs={"bot": bot})
    scheduler.start()


async def send_event_reminders(bot: Bot):
    """–ù–∞–¥—Å–∏–ª–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—ó, —è–∫—ñ –≤—ñ–¥–±—É–¥—É—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –≥–æ–¥–∏–Ω–∏"""
    now = datetime.now()
    reminder_window = now + timedelta(minutes=60)

    events = [e for e in load_events()
              if now < datetime.fromisoformat(e['datetime']) <= reminder_window]

    if not events:
        return

    conn = get_connection()
    cursor = conn.cursor()

    try:
        for event in events:
            cursor.execute("""
                SELECT users.telegram_id, users.full_name 
                FROM registrations
                JOIN users ON users.telegram_id = registrations.telegram_id
                WHERE event_id = ?
            """, (event["id"],))
            users = cursor.fetchall()

            for telegram_id, full_name in users:
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=(
                            f"‚è∞ –ü—Ä–∏–≤—ñ—Ç, {full_name}!\n"
                            f"–ù–∞–≥–∞–¥—É—î–º–æ, —â–æ –ø–æ–¥—ñ—è <b>{event['title']}</b> —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –æ {event['datetime']}.\n"
                            f"–ù–µ –∑–∞–ø—ñ–∑–Ω—é–π—Ç–µ—Å—å! üòâ"
                        ),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {telegram_id}: {e}")

    finally:
        conn.close()
