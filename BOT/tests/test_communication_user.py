import pytest
import csv
from types import SimpleNamespace
from pathlib import Path
from BOT.handlers.communication.communication_user import (
    open_communication_menu,
    send_group_chat_link,
    send_communication_link,
    CHAT_CSV_PATH
)

# === –§–Ü–ö–°–¢–£–†–ê –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è CSV-—Ñ–∞–π–ª—É –ø–µ—Ä–µ–¥ —ñ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É ===
@pytest.fixture(autouse=True)
def clean_csv():
    """
    üßπ –ü–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ CSV-—Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î.
    –ü—ñ—Å–ª—è —Ç–µ—Å—Ç—É ‚Äî —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ, —â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞–≤ —ñ–Ω—à–∏–º —Ç–µ—Å—Ç–∞–º.
    """
    if CHAT_CSV_PATH.exists():
        CHAT_CSV_PATH.unlink()
    yield
    if CHAT_CSV_PATH.exists():
        CHAT_CSV_PATH.unlink()

# === –§–Ü–ö–°–¢–£–†–ê –¥–ª—è –ø—ñ–¥—Ä–æ–±–ª–µ–Ω–æ–≥–æ callback –æ–±'—î–∫—Ç–∞ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram) ===
@pytest.fixture
def dummy_callback():
    """
    üì© –°—Ç–≤–æ—Ä—é—î –ø—ñ–¥—Ä–æ–±–ª–µ–Ω–∏–π callback-–æ–±'—î–∫—Ç –∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    class DummyMessage:
        async def edit_text(self, text, **kwargs):
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ –ø—Ä–∏ edit_text
            dummy_callback.called_text = text

        async def answer(self, text):
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞
            dummy_callback.answered = text

    return SimpleNamespace(
        data="user_communication_menu",
        from_user=SimpleNamespace(id=123),
        message=DummyMessage()
    )

# === –¢–ï–°–¢: –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
@pytest.mark.asyncio
async def test_open_communication_menu():
    """
    ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è',
    –±–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é.
    """

    class DummyMessage:
        def __init__(self):
            self.called_text = None  # –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –Ω–∞–¥—ñ—à–ª–µ –±–æ—Ç

        async def edit_text(self, text, **kwargs):
            self.called_text = text

        async def answer(self, text):
            self.answered = text

    dummy_msg = DummyMessage()

    # –°–∏–º—É–ª—é—î–º–æ callback –≤—ñ–¥ Telegram-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    dummy_callback = SimpleNamespace(
        data="user_communication_menu",  # –∑–Ω–∞—á–µ–Ω–Ω—è data –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º–∞—Ä—à—Ä—É—Ç—É
        from_user=SimpleNamespace(id=123),
        message=dummy_msg
    )

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    await open_communication_menu(dummy_callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –º–µ–Ω—é –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    assert "üë• –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è" in dummy_msg.called_text

# === GROUP CHAT TEST ===

# === –¢–ï–°–¢: –ö–æ–ª–∏ —á–∞—Ç –¥–ª—è –≥—Ä—É–ø–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CSV ===
@pytest.mark.asyncio
async def test_send_group_chat_link_found(monkeypatch):
    """
    ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —è–∫—â–æ –≤ CSV —ñ—Å–Ω—É—î —á–∞—Ç –¥–ª—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (A-21),
    –±–æ—Ç –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.
    """

    # –°—Ç–≤–æ—Ä—é—î–º–æ CSV-—Ñ–∞–π–ª —ñ–∑ –∑–∞–ø–∏—Å–æ–º –¥–ª—è –≥—Ä—É–ø–∏ A-21
    CHAT_CSV_PATH.write_text("group,link\nA-21,https://t.me/groupA21\n", encoding="utf-8")

    # –ú–æ–∫–∞—î–º–æ SQLite-–∑–∞–ø–∏—Ç –¥–æ –ë–î: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≥—Ä—É–ø–∏ A-21
    class DummyCursor:
        def execute(self, sql, params): self.result = ("A-21",)
        def fetchone(self): return self.result

    class DummyConnection:
        def cursor(self): return DummyCursor()
        def close(self): pass

    # –ü—ñ–¥–º—ñ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó get_connection() –Ω–∞ —Ñ–µ–π–∫–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConnection())

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ answer()
    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    # –§–æ—Ä–º—É—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π callback –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    callback = SimpleNamespace(
        data="chat_by_group",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
    await send_group_chat_link(callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    assert "https://t.me/groupA21" in DummyMessage.answered

# === –¢–ï–°–¢: –ö–æ–ª–∏ —á–∞—Ç –¥–ª—è –≥—Ä—É–ø–∏ –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CSV ===
@pytest.mark.asyncio
async def test_send_group_chat_link_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —è–∫—â–æ –≥—Ä—É–ø–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (A-21) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ CSV,
    –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
    """

    # CSV –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—à—É –≥—Ä—É–ø—É (B-22), —Ç–æ–º—É —á–∞—Ç –Ω–µ –º–∞—î –∑–Ω–∞–π—Ç–∏—Å—å
    CHAT_CSV_PATH.write_text("group,link\nB-22,https://t.me/groupB22\n", encoding="utf-8")

    # –ú–æ–∫–∞—î–º–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≥—Ä—É–ø–∏ A-21 –∑ –ë–î
    class DummyCursor:
        def execute(self, sql, params): self.result = ("A-21",)
        def fetchone(self): return self.result

    class DummyConnection:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConnection())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_group",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_group_chat_link(callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —á–∞—Ç—É
    assert "—â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_specialty_found(monkeypatch):
    """
    ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —è–∫—â–æ –∫–æ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (122) –∑–Ω–∞–π–¥–µ–Ω–æ –≤ chat_links.csv,
    –±–æ—Ç –Ω–∞–¥–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç.
    """

    # –°—Ç–≤–æ—Ä—é—î–º–æ CSV-—Ñ–∞–π–ª —ñ–∑ —á–∞—Ç–æ–º –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ 122
    CHAT_CSV_PATH.write_text("specialty,link\n122,https://t.me/spec122\n", encoding="utf-8")

    # –ü—ñ–¥—Ä–æ–±–ª–µ–Ω—ñ SQL-–∑–∞–ø–∏—Ç–∏
    class DummyCursor:
        def execute(self, query, params):
            # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç: –∑–Ω–∞–π–¥–µ–Ω–æ specialty_id = 1
            if "specialty_id" in query:
                self.result = (1,)
            # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç: –ø–æ —Ü—å–æ–º—É ID –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥ "122"
            elif "code" in query:
                self.result = ("122",)
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    # –ü—ñ–¥–º—ñ–Ω–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    # –§–µ–π–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    # –°–∏–º—É–ª—é—î–º–æ callback –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    callback = SimpleNamespace(
        data="chat_by_specialty",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏
    await send_communication_link(callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    assert "https://t.me/spec122" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_specialty_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —è–∫—â–æ –∫–æ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (122) –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É chat_links.csv,
    –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
    """

    # –°—Ç–≤–æ—Ä—é—î–º–æ CSV-—Ñ–∞–π–ª —ñ–∑ —ñ–Ω—à–∏–º –∫–æ–¥–æ–º —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ (121)
    CHAT_CSV_PATH.write_text("specialty,link\n121,https://t.me/spec121\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params):
            # –Ø–∫ —ñ —Ä–∞–Ω—ñ—à–µ: ID —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ = 1 ‚Üí –∫–æ–¥ = "122"
            if "specialty_id" in query:
                self.result = (1,)
            elif "code" in query:
                self.result = ("122",)
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_specialty",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    # –ë–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
    assert "—â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_specialty_user_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —è–∫—â–æ —É –±–∞–∑—ñ –Ω–µ–º–∞—î specialty_id –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
    –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.
    """

    class DummyCursor:
        def execute(self, query, params):
            if "specialty_id" in query:
                self.result = None  # –ó–∞–ø–∏—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    # –ü—ñ–¥–º—ñ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó get_connection
    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_specialty",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    # –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ
    assert "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_enrollment_found(monkeypatch):
    """
    ‚úÖ –Ø–∫—â–æ –≤ –±–∞–∑—ñ —î —Ä—ñ–∫ –≤—Å—Ç—É–ø—É (2021), —ñ –≤ chat_links.csv —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —á–∞—Ç,
    –±–æ—Ç –º–∞—î –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.
    """

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —É CSV
    CHAT_CSV_PATH.write_text("enrollment_year,link\n2021,https://t.me/enroll2021\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params):
            self.result = (2021,)  # –ó–∞–ø–∏—Ç –¥–æ users.enrollment_year
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_enrollment",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    assert "https://t.me/enroll2021" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_enrollment_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —è–∫—â–æ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∑–∞–ø–∏—Å—É –≤ chat_links.csv,
    –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
    """

    # CSV-—Ñ–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∞—Ç—É –¥–ª—è 2021 —Ä–æ–∫—É
    CHAT_CSV_PATH.write_text("enrollment_year,link\n2020,https://t.me/enroll2020\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params):
            self.result = (2021,)  # –ë–î –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–∫ –≤—Å—Ç—É–ø—É, —è–∫–æ–≥–æ –Ω–µ–º–∞—î –≤ CSV
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_enrollment",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    assert "—â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_enrollment_user_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ —É –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –û—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É.
    """

    class DummyCursor:
        def execute(self, query, params): self.result = None  # fetchone() –ø–æ–≤–µ—Ä–Ω–µ None
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_enrollment",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    assert "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–∫ –≤—Å—Ç—É–ø—É" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_graduation_found(monkeypatch):
    """
    ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —è–∫—â–æ —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ —Ç–∞ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å —É CSV,
    –±–æ—Ç –Ω–∞–¥–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç.
    """

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV-—Ñ–∞–π–ª—É –∑ —á–∞—Ç–æ–º –¥–ª—è 2025 —Ä–æ–∫—É
    CHAT_CSV_PATH.write_text("graduation_year,link\n2025,https://t.me/grad2025\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params): self.result = (2025,)  # –ë–î –ø–æ–≤–µ—Ä—Ç–∞—î 2025
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_graduation",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    assert "https://t.me/grad2025" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_graduation_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –≤ CSV-—Ñ–∞–π–ª—ñ –Ω–µ–º–∞—î —á–∞—Ç—É –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∫—É.
    –û—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
    """

    # CSV –º—ñ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å –ª–∏—à–µ –¥–ª—è 2024 —Ä–æ–∫—É
    CHAT_CSV_PATH.write_text("graduation_year,link\n2024,https://t.me/grad2024\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params): self.result = (2025,)  # –ë–î –ø–æ–≤–µ—Ä—Ç–∞—î 2025
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_graduation",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)

    assert "—â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_graduation_user_not_found(monkeypatch):
    """
    ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É (graduation_year) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö (fetchone() ‚Üí None).
    
    –û—á—ñ–∫—É—î–º–æ, —â–æ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """

    # –ü—ñ–¥—Ä–æ–±–ª–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å–æ—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    class DummyCursor:
        def execute(self, query, params):
            # –£—Å—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å None ‚Äî –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            self.result = None
        def fetchone(self):
            return self.result

    # –ü—ñ–¥—Ä–æ–±–ª–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î, —è–∫–µ –ø–æ–≤–µ—Ä—Ç–∞—î –∫—É—Ä—Å–æ—Ä
    class DummyConn:
        def cursor(self):
            return DummyCursor()
        def close(self):
            pass

    # –ü—ñ–¥–º—ñ–Ω–∞ get_connection —Ç–∞–∫, —â–æ–± –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞–≤ DummyConn
    monkeypatch.setattr(
        "BOT.handlers.communication.communication_user.get_connection",
        lambda: DummyConn()
    )

    # –§–µ–π–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ—Ç–æ–¥–æ–º answer()
    class DummyMessage:
        async def answer(self, text):
            DummyMessage.answered = text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ callback –¥–ª—è chat_by_graduation
    callback = SimpleNamespace(
        data="chat_by_graduation",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –º–∞—î –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç
    await send_communication_link(callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    assert "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_by_unknown_type(monkeypatch):
    """
    üîç –¢–µ—Å—Ç—É—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ callback.data –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø (–Ω–µ specialty, enrollment, graduation).
    –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ç–∏–ø—É —á–∞—Ç—É.
    """

    # –ú–æ–∫–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é (–≤–æ–Ω–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î—Ç—å—Å—è, –±–æ –±–æ—Ç –∑—Ä–∞–∑—É –ø–æ–≤–µ—Ä–Ω–µ –ø–æ–º–∏–ª–∫—É)
    class DummyConn:
        def cursor(self): return None
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É
    callback = SimpleNamespace(
        data="chat_by_unknown",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    await send_communication_link(callback, state=None)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    assert "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —á–∞—Ç—É" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_csv_not_exists(monkeypatch):
    """
    üìÇ –¢–µ—Å—Ç—É—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ CSV-—Ñ–∞–π–ª chat_links.csv –≤–∑–∞–≥–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.
    –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —á–∞—Ç—ñ–≤.
    """

    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î)
    if CHAT_CSV_PATH.exists():
        CHAT_CSV_PATH.unlink()

    class DummyCursor:
        def execute(self, query, params): self.result = (2021,)
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_enrollment",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)
    assert "–ñ–æ–¥–Ω–æ–≥–æ —á–∞—Ç—É —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered

@pytest.mark.asyncio
async def test_chat_csv_empty_file(monkeypatch):
    """
    üì≠ –¢–µ—Å—Ç—É—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ CSV-—Ñ–∞–π–ª —ñ—Å–Ω—É—î, –∞–ª–µ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.
    –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —á–∞—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
    """

    # –°—Ç–≤–æ—Ä—é—î–º–æ CSV-—Ñ–∞–π–ª –ª–∏—à–µ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    CHAT_CSV_PATH.write_text("enrollment_year,link\n", encoding="utf-8")

    class DummyCursor:
        def execute(self, query, params): self.result = (2021,)
        def fetchone(self): return self.result

    class DummyConn:
        def cursor(self): return DummyCursor()
        def close(self): pass

    monkeypatch.setattr("BOT.handlers.communication.communication_user.get_connection", lambda: DummyConn())

    class DummyMessage:
        async def answer(self, text): DummyMessage.answered = text

    callback = SimpleNamespace(
        data="chat_by_enrollment",
        from_user=SimpleNamespace(id=1),
        message=DummyMessage()
    )

    await send_communication_link(callback, state=None)
    assert "—â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ" in DummyMessage.answered