import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch, ANY
from aiogram.types import Message
from datetime import datetime
from BOT.handlers.edit.edit_profile_user import (
    edit_full_name, edit_phone_number, edit_group_name,
    edit_specialty, edit_enrollment_year, edit_graduation_year,
    edit_birth_date, EditProfile, choose_field_to_edit, back_to_user_menu
)

# ---------- –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—ñ–∫—Å—Ç—É—Ä–∏ ----------
@pytest.fixture
def mock_message():
    msg = MagicMock(spec=Message)
    msg.text = "–¢–µ—Å—Ç–æ–≤–µ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    from_user = MagicMock()
    from_user.id = 12345
    msg.from_user = from_user
    msg.answer = AsyncMock()
    return msg

@pytest.fixture
def mock_state():
    state = AsyncMock()
    return state

# ---------- –¢–µ—Å—Ç –¥–ª—è –∑–º—ñ–Ω–∏ –ü–Ü–ë ----------
@pytest.mark.asyncio
async def test_edit_full_name_valid(mock_message, mock_state):
    mock_message.text = "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ"
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_full_name(mock_message, mock_state)

        mock_cursor.execute.assert_called_once()
        mock_message.answer.assert_called_with("‚úÖ –ü–Ü–ë –æ–Ω–æ–≤–ª–µ–Ω–æ!")

@pytest.mark.asyncio
async def test_edit_full_name_invalid(mock_message, mock_state):
    mock_message.text = "–Ü–≤–∞–Ω123"
    await edit_full_name(mock_message, mock_state)
    mock_message.answer.assert_called_with("‚ùå –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –¥–≤–æ—Ö —Å–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

# ---------- –¢–µ—Å—Ç –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É ----------
@pytest.mark.asyncio
async def test_edit_phone_number_valid(mock_message, mock_state):
    mock_message.text = "+380501112233"
    with patch("BOT.handlers.edit.edit_profile_user.is_valid_phone", return_value=True), \
         patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_phone_number(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

@pytest.mark.asyncio
async def test_edit_phone_number_invalid(mock_message, mock_state):
    mock_message.text = "123abc"
    with patch("BOT.handlers.edit.edit_profile_user.is_valid_phone", return_value=False):
        await edit_phone_number(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")

# ---------- –¢–µ—Å—Ç –¥–ª—è –≥—Ä—É–ø–∏ ----------
@pytest.mark.asyncio
async def test_edit_group_name_valid(mock_message, mock_state):
    mock_message.text = "—Ç–≤-12"
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_group_name(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –ì—Ä—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

@pytest.mark.asyncio
async def test_edit_group_name_invalid(mock_message, mock_state):
    mock_message.text = "–≥—Ä—É–ø–∞1"
    await edit_group_name(mock_message, mock_state)
    mock_message.answer.assert_called_with("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12):")

# ---------- –¢–µ—Å—Ç –¥–ª—è –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ----------
@pytest.mark.asyncio
async def test_edit_birth_date_valid(mock_message, mock_state):
    mock_message.text = "01.01.2000"
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_birth_date(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!")

@pytest.mark.asyncio
async def test_edit_birth_date_invalid(mock_message, mock_state):
    mock_message.text = "2000-01-01"
    await edit_birth_date(mock_message, mock_state)
    mock_message.answer.assert_called_with("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ (–î–î.–ú–ú.–†–†–†–†):")

# ---------- –¢–µ—Å—Ç —Ä–æ–∫—É –≤—Å—Ç—É–ø—É ----------
@pytest.mark.asyncio
async def test_edit_enrollment_year_valid(mock_message, mock_state):
    mock_message.text = "2020"
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_enrollment_year(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –†—ñ–∫ –≤—Å—Ç—É–ø—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: 2020")

@pytest.mark.asyncio
async def test_edit_enrollment_year_invalid_format(mock_message, mock_state):
    mock_message.text = "–¥–≤–∞–¥—Ü—è—Ç—å"
    await edit_enrollment_year(mock_message, mock_state)
    mock_message.answer.assert_called_with("‚ùå –†—ñ–∫ –≤—Å—Ç—É–ø—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")

# ---------- –¢–µ—Å—Ç —Ä–æ–∫—É –≤–∏–ø—É—Å–∫—É ----------
@pytest.mark.asyncio
async def test_edit_graduation_year_valid(mock_message, mock_state):
    mock_message.text = "2023"
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_graduation_year(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: 2023")

@pytest.mark.asyncio
async def test_edit_graduation_year_invalid_format(mock_message, mock_state):
    mock_message.text = "–¥–≤–∞–¥—Ü—è—Ç—å"
    await edit_graduation_year(mock_message, mock_state)
    mock_message.answer.assert_called_with("‚ùå –†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")

@pytest.mark.asyncio
async def test_edit_specialty_no_match(mock_message, mock_state):
    mock_message.text = "–ù–µ–≤—ñ–¥–æ–º–∞ —Å–ø–µ—Ü"
    with patch("BOT.handlers.edit.edit_profile_user.search_specialty", return_value=[]):
        await edit_specialty(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚ùå –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@pytest.mark.asyncio
async def test_edit_specialty_multiple_matches(mock_message, mock_state):
    mock_message.text = "—ñ–Ω–∂–µ–Ω–µ—Ä"
    with patch("BOT.handlers.edit.edit_profile_user.search_specialty", return_value=[
        {"name": "–Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è", "code": "121"}, {"name": "–Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è –ü–ó", "code": "122"}
    ]):
        await edit_specialty(mock_message, mock_state)
        assert mock_message.answer.call_args[0][0].startswith("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:")

@pytest.mark.asyncio
async def test_edit_specialty_single_valid_match(mock_message, mock_state):
    mock_message.text = "–ü–ó"
    specialty = {"name": "–ü—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è", "code": "121"}
    with patch("BOT.handlers.edit.edit_profile_user.search_specialty", return_value=[specialty]), \
         patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_cursor.fetchone.return_value = (42,)
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_specialty(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚úÖ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: –ü—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (121)")

from unittest.mock import patch, MagicMock, AsyncMock

@pytest.mark.asyncio
async def test_edit_specialty_not_in_db(mock_message, mock_state):
    mock_message.text = "–ü–ó"
    specialty = {"name": "–ü—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è", "code": "121"}
    with patch("BOT.handlers.edit.edit_profile_user.search_specialty", return_value=[specialty]), \
         patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn, \
         patch("BOT.handlers.edit.edit_profile_user.show_edit_profile_menu_message", new_callable=AsyncMock):

        mock_cursor = MagicMock()
        mock_cursor.fetchone.return_value = None
        mock_conn.return_value.cursor.return_value = mock_cursor

        await edit_specialty(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –≤ –±–∞–∑—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")



@pytest.mark.asyncio
async def test_show_edit_profile_menu_user_not_found(mock_message, mock_state):
    with patch("BOT.handlers.edit.edit_profile_user.get_connection") as mock_conn:
        mock_conn.return_value.cursor.return_value.fetchone.return_value = None
        from BOT.handlers.edit.edit_profile_user import show_edit_profile_menu_message
        await show_edit_profile_menu_message(mock_message, mock_state)
        mock_message.answer.assert_called_with("‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ANY, parse_mode="HTML")


@pytest.mark.asyncio
async def test_back_to_user_menu():
    mock_callback = AsyncMock()
    mock_callback.data = "back_to_user_menu"
    mock_callback.message.edit_text = AsyncMock()
    mock_state = AsyncMock()

    await back_to_user_menu(mock_callback, mock_state)

    mock_callback.message.edit_text.assert_called_once()
    mock_state.clear.assert_called_once()

@pytest.mark.asyncio
async def test_choose_field_to_edit_full_name():
    callback = AsyncMock()
    callback.data = "edit_full_name"
    callback.message.answer = AsyncMock()
    state = AsyncMock()

    await choose_field_to_edit(callback, state)
    callback.message.answer.assert_called_with("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ü–Ü–ë (2 —Å–ª–æ–≤–∞, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏):")
    state.set_state.assert_called_with(EditProfile.editing_full_name)
