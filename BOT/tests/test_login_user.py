import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram.fsm.context import FSMContext
from BOT.handlers.login.login_user import (
    process_login_group, process_login_phone, start_user_login,user_main_menu_keyboard,
    UserLogin
)
from datetime import datetime, timedelta

@pytest.mark.asyncio
async def test_start_user_login():
    message = AsyncMock()
    state = AsyncMock()

    await start_user_login(message, state)

    state.update_data.assert_called_with(attempts=3)
    state.set_state.assert_called_with(UserLogin.phone_number)
    message.answer.assert_called_with("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥—É:")


@pytest.mark.asyncio
async def test_process_login_phone_invalid():
    message = AsyncMock()
    message.text = "123abc"
    state = AsyncMock()

    with patch("BOT.handlers.login.login_user.is_valid_phone", return_value=False):
        await process_login_phone(message, state)

    message.answer.assert_called_with("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")


@pytest.mark.asyncio
async def test_process_login_phone_valid():
    message = AsyncMock()
    message.text = "+380991112233"
    message.contact = None  # üîë –¶–µ –∫–ª—é—á –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É
    state = AsyncMock()

    with patch("BOT.handlers.login.login_user.is_valid_phone", return_value=True):
        await process_login_phone(message, state)

    state.update_data.assert_called_with(phone_number="+380991112233")
    message.answer.assert_called_with("üî¢ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12):")
    state.set_state.assert_called_with(UserLogin.group_name)



@pytest.mark.asyncio
async def test_process_login_group_invalid_format():
    message = AsyncMock()
    message.text = "TV12"
    state = AsyncMock()

    await process_login_group(message, state)

    message.answer.assert_called_with(
        "–ì—Ä—É–ø–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 2 –ª—ñ—Ç–µ—Ä–∏, —Ç–∏—Ä–µ, 2 —Ü–∏—Ñ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–í-12). –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:"
    )

@pytest.mark.asyncio
async def test_process_login_group_success():
    message = AsyncMock()
    message.text = "–¢–í-12"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={"phone_number": "+380991112233"})

    with patch("BOT.handlers.login.login_user.get_connection") as mock_conn:
        mock_cursor = MagicMock()
        mock_cursor.fetchone.side_effect = [
            (1, "–û–ª–µ–Ω–∞ –¢–µ—Å—Ç", 0, None)  # –£—Å–ø—ñ—à–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
        ]
        mock_conn.return_value.cursor.return_value = mock_cursor

        await process_login_group(message, state)

    message.answer.assert_any_call("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—é, –û–ª–µ–Ω–∞ –¢–µ—Å—Ç!", reply_markup=user_main_menu_keyboard)
    state.clear.assert_called_once()


@pytest.mark.asyncio
async def test_process_login_group_blocked():
    message = AsyncMock()
    message.text = "–¢–í-12"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={"phone_number": "+380999999999"})

    recent_time = (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%d %H:%M:%S")

    with patch("BOT.handlers.login.login_user.get_connection") as mock_conn:
        mock_cursor = MagicMock()
        mock_cursor.fetchone.side_effect = [
            (1, "Blocked User", 3, recent_time)
        ]
        mock_conn.return_value.cursor.return_value = mock_cursor

        await process_login_group(message, state)

    assert "–°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑" in message.answer.call_args[0][0]


@pytest.mark.asyncio
async def test_process_login_group_wrong_group():
    message = AsyncMock()
    message.text = "–¢–í-12"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={"phone_number": "+380999999999"})

    with patch("BOT.handlers.login.login_user.get_connection") as mock_conn:
        mock_cursor = MagicMock()
        mock_cursor.fetchone.side_effect = [
            None,  # –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä—Ç–∞—î None (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —ñ –≥—Ä—É–ø–æ—é)
            (2, 1)  # –¥—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ 1 –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é —Å–ø—Ä–æ–±–æ—é
        ]
        mock_conn.return_value.cursor.return_value = mock_cursor

        await process_login_group(message, state)

    message.answer.assert_called_with("‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≥—Ä—É–ø–∞ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    state.set_state.assert_called_with(UserLogin.phone_number)
