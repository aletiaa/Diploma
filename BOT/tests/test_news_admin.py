import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from BOT.handlers.news.news_admin import (
    handle_full_desc, handle_link, save_news, view_news_detail,
    delete_news_confirm, edit_news_short_desc, save_edited_news
)
from BOT.handlers.news.news_admin import NewsStates
from datetime import timedelta


@pytest.mark.asyncio
async def test_handle_full_desc_generates_short_desc():
    message = AsyncMock()
    message.text = "–¶–µ –¥—É–∂–µ –¥–æ–≤–≥–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏."
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.generate_short_title", return_value="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"):
        await handle_full_desc(message, state)

    state.update_data.assert_any_call(full_desc="–¶–µ –¥—É–∂–µ –¥–æ–≤–≥–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏.")
    state.update_data.assert_any_call(short_desc="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å")
    message.answer.assert_any_call("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n<code>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å</code>", parse_mode="HTML")


@pytest.mark.asyncio
async def test_save_news_valid_date():
    message = AsyncMock()
    message.text = "01.01.2024"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={
        "short_desc": "–ö–æ—Ä–æ—Ç–∫–æ",
        "full_desc": "–î–µ—Ç–∞–ª—å–Ω–æ",
        "link": "https://example.com"
    })

    with patch("BOT.handlers.news.news_admin.is_valid_url", return_value=True), \
         patch("BOT.handlers.news.news_admin.save_news_to_db"), \
         patch("BOT.handlers.news.news_admin.save_news_to_json"), \
         patch("BOT.handlers.news.news_admin.show_news_menu", new=AsyncMock()):
        await save_news(message, state)

    message.answer.assert_any_call("‚úÖ –ù–æ–≤–∏–Ω—É –¥–æ–¥–∞–Ω–æ!")


@pytest.mark.asyncio
async def test_save_news_invalid_date():
    message = AsyncMock()
    message.text = "32.13.2024"
    state = AsyncMock()

    await save_news(message, state)
    message.answer.assert_called_with("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")


@pytest.mark.asyncio
async def test_view_news_detail_found():
    message = AsyncMock()
    message.text = "1"
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn, \
         patch("BOT.handlers.news.news_admin.show_news_menu", new=AsyncMock()):
        cursor = MagicMock()
        cursor.fetchone.return_value = ("–ö–æ—Ä–æ—Ç–∫–æ", "–î–µ—Ç–∞–ª—å–Ω–æ", "2024-05-01", "https://example.com")
        mock_conn.return_value.cursor.return_value = cursor

        await view_news_detail(message, state)

    assert message.answer.call_args[0][0].startswith("üì∞ <b>–ù–æ–≤–∏–Ω–∞ #1</b>")


@pytest.mark.asyncio
async def test_delete_news_confirm():
    message = AsyncMock()
    message.text = "1"
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn, \
         patch("BOT.handlers.news.news_admin.show_news_menu", new=AsyncMock()):
        cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = cursor

        await delete_news_confirm(message, state)

    message.answer.assert_called_with("‚úÖ –ù–æ–≤–∏–Ω—É –∑ ID 1 –≤–∏–¥–∞–ª–µ–Ω–æ.")


@pytest.mark.asyncio
async def test_edit_news_short_desc_found():
    message = AsyncMock()
    message.text = "1"
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn:
        cursor = MagicMock()
        cursor.fetchone.return_value = ("–°—Ç–∞—Ä–∏–π –æ–ø–∏—Å",)
        mock_conn.return_value.cursor.return_value = cursor

        await edit_news_short_desc(message, state)

    message.answer.assert_called_with("–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n–°—Ç–∞—Ä–∏–π –æ–ø–∏—Å\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:")


@pytest.mark.asyncio
async def test_save_edited_news():
    message = AsyncMock()
    message.text = "–ù–æ–≤–∏–π –æ–ø–∏—Å"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={"news_id": "1"})

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn, \
         patch("BOT.handlers.news.news_admin.show_news_menu", new=AsyncMock()):
        cursor = MagicMock()
        mock_conn.return_value.cursor.return_value = cursor

        await save_edited_news(message, state)

    message.answer.assert_called_with("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏ #1 –æ–Ω–æ–≤–ª–µ–Ω–æ.")

@pytest.mark.asyncio
async def test_generate_short_desc_empty():
    message = AsyncMock()
    message.text = "   "
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.generate_short_title", return_value="–ë–µ–∑ –æ–ø–∏—Å—É"):
        await handle_full_desc(message, state)
        message.answer.assert_any_call("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n<code>–ë–µ–∑ –æ–ø–∏—Å—É</code>", parse_mode="HTML")

@pytest.mark.asyncio
async def test_invalid_url():
    message = AsyncMock()
    message.text = "https://invalid-url"
    state = AsyncMock()
    state.update_data = AsyncMock()
    state.get_data = AsyncMock(return_value={
        'full_desc': '–ù–æ–≤–∏–Ω–∞...',
        'short_desc': '–ù–æ–≤–∏–Ω–∞',
        'link': 'invalid-url'
    })

    await handle_link(message, state)
    message.answer.assert_called_with("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–æ–≤–∏–Ω–∏ (–î–î.–ú–ú.–†–†–†–†):")


@pytest.mark.asyncio
async def test_invalid_date_format():
    message = AsyncMock()
    message.text = "2024/01/01"
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={
        'link': 'https://example.com',
        'short_desc': '–ö–æ—Ä–æ—Ç–∫–æ',
        'full_desc': '–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å'
    })

    await save_news(message, state)
    message.answer.assert_called_with("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")


@pytest.mark.asyncio
async def test_future_date():
    future_date = (datetime.today() + timedelta(days=1)).strftime("%d.%m.%Y")
    message = AsyncMock()
    message.text = future_date
    state = AsyncMock()
    state.get_data = AsyncMock(return_value={
        'link': 'https://example.com',
        'short_desc': '–ö–æ—Ä–æ—Ç–∫–æ',
        'full_desc': '–ü–æ–≤–Ω–∏–π –æ–ø–∏—Å'
    })

    await save_news(message, state)
    message.answer.assert_called_with("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É.")


# ‚úÖ –¢–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó –Ω–æ–≤–∏–Ω–∏
@pytest.mark.asyncio
async def test_view_nonexistent_news():
    message = AsyncMock()
    message.text = "999"
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchone.return_value = None

        await view_news_detail(message, state)

        message.answer.assert_any_call("‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")


# ‚úÖ –¢–µ—Å—Ç –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó –Ω–æ–≤–∏–Ω–∏
@pytest.mark.asyncio
async def test_edit_nonexistent_news():
    message = AsyncMock()
    message.text = "999"
    state = AsyncMock()

    with patch("BOT.handlers.news.news_admin.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchone.return_value = None

        await edit_news_short_desc(message, state)

        message.answer.assert_any_call("‚ùå –ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")