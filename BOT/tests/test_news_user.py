import pytest
from unittest.mock import AsyncMock, patch, ANY
from datetime import datetime, timedelta

from BOT.handlers.news.news_user import (
    show_user_news_menu,
    show_weekly_news,
    back_to_user_menu,
    ask_for_news_date,
    show_news_for_date
)
from BOT.handlers.news.news_user import NewsUserStates

@pytest.mark.asyncio
async def test_show_user_news_menu():
    callback = AsyncMock()
    state = AsyncMock()

    await show_user_news_menu(callback, state)
    callback.message.edit_text.assert_called_once()


@pytest.mark.asyncio
async def test_show_weekly_news_with_results():
    callback = AsyncMock()
    state = AsyncMock()
    news_data = [(1, "–û–ø–∏—Å", (datetime.today().date()).isoformat(), "http://link")] 

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = news_data

        await show_weekly_news(callback, state)
        callback.message.answer.assert_any_call("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å:", reply_markup=ANY)


@pytest.mark.asyncio
async def test_show_weekly_news_no_results():
    callback = AsyncMock()
    state = AsyncMock()

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = []

        await show_weekly_news(callback, state)
        callback.message.answer.assert_any_call("‚ùå –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.")


@pytest.mark.asyncio
async def test_back_to_user_menu():
    callback = AsyncMock()
    state = AsyncMock()
    await back_to_user_menu(callback, state)
    callback.message.edit_text.assert_called_once()


@pytest.mark.asyncio
async def test_ask_for_news_date():
    callback = AsyncMock()
    state = AsyncMock()
    await ask_for_news_date(callback, state)
    state.set_state.assert_called_with(NewsUserStates.waiting_for_news_date)


@pytest.mark.asyncio
async def test_show_news_for_valid_date():
    message = AsyncMock()
    state = AsyncMock()
    message.text = datetime.today().strftime("%d.%m.%Y")
    news_data = [("–û–ø–∏—Å", datetime.today().date().isoformat(), "http://link")]

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = news_data

        await show_news_for_date(message, state)
        message.answer.assert_any_call("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å:", reply_markup=ANY)


@pytest.mark.asyncio
async def test_show_news_for_invalid_date():
    message = AsyncMock()
    state = AsyncMock()
    message.text = "31-13-2025"

    await show_news_for_date(message, state)
    message.answer.assert_awaited_with("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.")


@pytest.mark.asyncio
async def test_show_news_for_date_no_results():
    message = AsyncMock()
    state = AsyncMock()
    message.text = "01.01.2000"

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = []

        await show_news_for_date(message, state)
        message.answer.assert_any_call("‚ùå –ù–æ–≤–∏–Ω–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@pytest.mark.asyncio
async def test_weekly_news_includes_7_day_old_news():
    callback = AsyncMock()
    callback.data = "weekly_news"
    callback.message.answer = AsyncMock()
    
    seven_days_ago = (datetime.today().date() - timedelta(days=7)).isoformat()

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = [
            (1, "–ù–æ–≤–∏–Ω–∞ –Ω–∞ –º–µ–∂—ñ", seven_days_ago, "https://example.com")
        ]

        await show_weekly_news(callback, state=AsyncMock())

        callback.message.answer.assert_any_call(
            "üìÖ <b>{}</b>\n‚úèÔ∏è –ù–æ–≤–∏–Ω–∞ –Ω–∞ –º–µ–∂—ñ\nüîó <a href='https://example.com'>–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ</a>".format(seven_days_ago),
            parse_mode="HTML"
        )


@pytest.mark.asyncio
async def test_multiple_news_same_day():   
    callback = AsyncMock()
    callback.data = "weekly_news"
    callback.message.answer = AsyncMock()
    
    today = datetime.today().date().isoformat()

    with patch("BOT.handlers.news.news_user.get_connection") as mock_conn:
        mock_cursor = mock_conn.return_value.cursor.return_value
        mock_cursor.fetchall.return_value = [
            (3, "–¢—Ä–µ—Ç—è –Ω–æ–≤–∏–Ω–∞", today, "https://example.com/3"),
            (2, "–î—Ä—É–≥–∞ –Ω–æ–≤–∏–Ω–∞", today, "https://example.com/2"),
            (1, "–ü–µ—Ä—à–∞ –Ω–æ–≤–∏–Ω–∞", today, "https://example.com/1"),
        ]

        await show_weekly_news(callback, state=AsyncMock())

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ–∂–Ω–∞ –∑ —Ç—Ä—å–æ—Ö –Ω–æ–≤–∏–Ω –≤–∏–≤–µ–¥–µ–Ω–∞
        assert callback.message.answer.call_count == 4  # 3 –Ω–æ–≤–∏–Ω–∏ + –∫–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å:"
        callback.message.answer.assert_any_call(
            f"üìÖ <b>{today}</b>\n‚úèÔ∏è –¢—Ä–µ—Ç—è –Ω–æ–≤–∏–Ω–∞\nüîó <a href='https://example.com/3'>–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ</a>", parse_mode="HTML"
        )
        callback.message.answer.assert_any_call(
            f"üìÖ <b>{today}</b>\n‚úèÔ∏è –î—Ä—É–≥–∞ –Ω–æ–≤–∏–Ω–∞\nüîó <a href='https://example.com/2'>–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ</a>", parse_mode="HTML"
        )
        callback.message.answer.assert_any_call(
            f"üìÖ <b>{today}</b>\n‚úèÔ∏è –ü–µ—Ä—à–∞ –Ω–æ–≤–∏–Ω–∞\nüîó <a href='https://example.com/1'>–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ</a>", parse_mode="HTML"
        )
